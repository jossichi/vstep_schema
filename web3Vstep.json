[
  {
    "_id": "collection_cards",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "CardData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "card_id": {
              "type": "string",
              "unique": true,
              "description": "Mã định danh duy nhất của thẻ"
            },
            "user_id": {
              "type": "string",
              "unique": true,
              "description": "ID người dùng sở hữu thẻ"
            },
            "public_key": {
              "type": "string",
              "description": "Khóa công khai để xác thực chữ ký số"
            },
            "token": { "type": "String", "required": true },
            "qr_code": {
              "type": "string",
              "description": "Mã QR chứa thông tin xác thực (đã mã hóa)"
            },
            "signature": {
              "type": "string",
              "description": "Chữ ký số được tạo bởi ví của người dùng"
            },
            "status": {
              "type": "string",
              "enum": ["active", "blocked"],
              "description": "Trạng thái thẻ"
            },
            "balance": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "description": "Số dư hiện tại trên thẻ (đơn vị VND)."
            },
            "device_id": {
              "type": "string",
              "description": "ID của thiết bị sử dụng thẻ (nếu có).",
              "nullable": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian tạo thẻ"
            },
            "user_OTP": {
              "bsonType": "string",
              "pattern": "^[0-9]{6}$",
              "description": "Mã OTP do người dùng nhập, phải là số có 6 chữ số."
            },
            "remaining_attempts": {
              "type": "integer",
              "minimum": 0,
              "default": 2,
              "description": "Số lượt làm bài còn lại của người dùng."
            },
            "hashed_studentID": {
              "type": "string",
              "unique": true,
              "description": "Giá trị băm của studentID"
            }
          },
          "required": [
            "_id",
            "card_id",
            "user_id",
            "public_key",
            "qr_code",
            "token",
            "status",
            "created_at",
            "hashed_studentID",
            "remaining_attempts"
          ]
        },
        "jsonSample": [
          {
            "_id": "60c72b2f9b1e8c001c8e4d3a",
            "card_id": "card123",
            "user_id": "user123",
            "public_key": "-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----",
            "token": "token123",
            "qr_code": "https://example.com/cards/card123",
            "signature": "signature123",
            "status": "active",
            "balance": 10000,
            "device_id": null,
            "created_at": "2025-01-01T10:00:00Z",
            "user_OTP": null,
            "remaining_attempts": 2,
            "hashed_studentID": "hashedStudentID123"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$addFields": {
                  "key_pair": {
                    "$function": {
                      "body": "function() { const crypto = require('crypto'); const { publicKey, privateKey } = crypto.generateKeyPairSync('ec', { namedCurve: 'secp256k1', publicKeyEncoding: { type: 'spki', format: 'pem' }, privateKeyEncoding: { type: 'pkcs8', format: 'pem' } }); return { publicKey, privateKey }; }",
                      "args": [],
                      "lang": "js"
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "public_key": "$key_pair.publicKey",
                  "private_key": "$key_pair.privateKey"
                }
              },
              {
                "$addFields": {
                  "raw_qr_data": {
                    "user_id": "$user_id",
                    "card_id": "$card_id"
                  }
                }
              },
              {
                "$addFields": {
                  "encrypted_qr_data": {
                    "$function": {
                      "body": "function(data, secretKey) { const crypto = require('crypto'); const cipher = crypto.createCipher('aes-256-cbc', secretKey); let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex'); encrypted += cipher.final('hex'); return encrypted; }",
                      "args": ["$raw_qr_data", "your-secret-key"],
                      "lang": "js"
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "qr_code": {
                    "$concat": ["https://example.com/cards/", "$card_id"]
                  }
                }
              },
              {
                "$addFields": {
                  "signature": {
                    "$function": {
                      "body": "function(privateKey, qr_data) { const crypto = require('crypto'); const sign = crypto.createSign('SHA256'); sign.update(qr_data); sign.end(); return sign.sign(privateKey, 'base64'); }",
                      "args": ["$private_key", "$encrypted_qr_data"],
                      "lang": "js"
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "hashed_studentID": {
                    "$function": {
                      "body": "function(studentID) { const crypto = require('crypto'); return crypto.createHash('sha256').update(studentID).digest('hex'); }",
                      "args": ["$studentID"],
                      "lang": "js"
                    }
                  }
                }
              },
              {
                "$unset": [
                  "key_pair",
                  "private_key",
                  "studentID",
                  "raw_qr_data"
                ]
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Create physical wallet and hash studentID without storing the original studentID.",
            "data_input_from_node": [],
            "data_output_to_node": []
          },
          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "collection_leaderboard",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "leaderboard_entry"
                }
              },

              {
                "$match": {
                  "leaderboard_entry": { "$size": 0 }
                }
              },

              {
                "$project": {
                  "_id": 0,
                  "user_id": 1,
                  "leaderboard_score": { "$const": null },
                  "rank": { "$const": null },
                  "current_streak": { "$const": null },
                  "longest_streak": { "$const": null },
                  "last_rank": { "$const": null },
                  "top10_history": {
                    "entered_top10_at": { "$const": null },
                    "time_in_top10": { "$const": 0 }
                  },
                  "last_reset_time": { "$const": null }
                }
              },

              {
                "$merge": {
                  "into": "collection_leaderboard",
                  "on": "user_id",
                  "whenMatched": "keepExisting",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Add user to leaderboard if not already present.",
            "data_input_from_node": [],
            "data_output_to_node": []
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_OTP": { "$exists": true },
                  "transaction_type": "payment"
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$match": {
                  "card_data.user_OTP": "$OTP_input"
                }
              },
              {
                "$set": {
                  "signature": "$card_data.signature"
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Xác thực giao dịch thanh toán bằng OTP và lưu vào collection_user_transactions.",
            "data_input_from_node": [],
            "data_output_to_node": []
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "remaining_attempts": 0,
                  "is_completed": false
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_transactions",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_transactions"
                }
              },
              {
                "$addFields": {
                  "has_pending_transaction": {
                    "$anyElementTrue": {
                      "$map": {
                        "input": "$user_transactions",
                        "as": "transaction",
                        "in": {
                          "$and": [
                            { "$eq": ["$$transaction.status", "pending"] },
                            {
                              "$eq": [
                                "$$transaction.transaction_type",
                                "payment"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "$match": {
                  "has_pending_transaction": false
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tạo giao dịch thanh toán mới khi remaining_attempts == 0.",
            "data_input_from_node": ["collection_cards"],
            "data_output_to_node": ["collection_user_transactions"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "transaction_type": "payment",
                  "amount": 10000,
                  "status": "completed"
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_materials"
                }
              },
              {
                "$unwind": "$user_materials"
              },
              {
                "$addFields": {
                  "user_materials.remaining_attempts": {
                    "$add": ["$user_materials.remaining_attempts", 5]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Mở khóa thêm lượt làm bài sau khi người dùng thanh toán 10k.",
            "data_input_from_node": ["collection_user_transactions"],
            "data_output_to_node": ["collection_cards"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "last_reset_time": { "$exists": true },
                  "$expr": {
                    "$lt": [
                      "$last_reset_time",
                      {
                        "$add": [
                          {
                            "$dateTrunc": {
                              "date": "$$NOW",
                              "unit": "day",
                              "binSize": 1,
                              "timezone": "Asia/Ho_Chi_Minh"
                            }
                          },
                          { "$literal": 25200000 }
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_materials"
                }
              },
              {
                "$unwind": "$user_materials"
              },
              {
                "$addFields": {
                  "refund_amount": {
                    "$multiply": [
                      {
                        "$subtract": [5, "$user_materials.remaining_attempts"]
                      },
                      2000
                    ]
                  }
                }
              },
              {
                "$match": {
                  "refund_amount": { "$gt": 0 }
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "user_id",
                  "whenMatched": [
                    {
                      "$set": {
                        "balance": { "$add": ["$balance", "$refund_amount"] }
                      }
                    }
                  ],
                  "whenNotMatched": "insert"
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": [
                    {
                      "$set": {
                        "refund_amount": "$refund_amount",
                        "refund_time": "$$NOW",
                        "status": "refunded"
                      }
                    }
                  ],
                  "whenNotMatched": "insert"
                }
              },
              {
                "$set": {
                  "user_materials.remaining_attempts": 0,
                  "last_reset_time": { "$now": [] }
                }
              },
              {
                "$merge": {
                  "into": "collection_materials_user_done",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Reset số lượng bài tập và lượt làm bài còn lại vào lúc 7:00 AM hằng ngày.",
            "data_input_from_node": ["collection_materials_user_done"],
            "data_output_to_node": ["collection_materials_user_done"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_user_login",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "UserData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the document in MongoDB."
            },
            "user_id": {
              "type": "string",
              "unique": true,
              "description": "ID người dùng sở hữu thẻ"
            },
            "card_id": {
              "type": "string",
              "description": "Mã định danh của thẻ vật lý (nếu có).",
              "nullable": true
            },
            "token_login": {
              "type": "object",
              "properties": {
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Thời gian hết hạn của token"
                }
              }
            },

            "signature": {
              "type": "string",
              "description": "Chữ ký số được tạo bởi ví của người dùng"
            }
          },
          "required": ["_id", "card_id", "signature", "token_login"],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "USER001",
            "user_id": "102fd0c3-ed5b-44f6-86da-896b250ddcc9",
            "card_id": "C123456789"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "card_id",
                  "foreignField": "card_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_data"
                }
              },
              {
                "$unwind": "$user_data"
              },

              {
                "$lookup": {
                  "from": "blocked_cards",
                  "localField": "card_id",
                  "foreignField": "card_id",
                  "as": "blocked_info"
                }
              },
              {
                "$addFields": {
                  "active_block": {
                    "$filter": {
                      "input": "$blocked_info",
                      "cond": {
                        "$and": [
                          { "$eq": ["$$this.user_id", "$user_id"] },
                          {
                            "$or": [
                              { "$gte": ["$$this.unblock_date", "$$NOW"] },
                              { "$eq": ["$$this.unblock_date", null] }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              },
              {
                "$match": {
                  "active_block.0": { "$exists": false }
                }
              }
            ],
            "purpose": "Kiểm tra người dùng có bị chặn không dựa trên card_id và user_id",
            "data_input_from_node": ["card_id", "user_id"],
            "data_output_to_node": ["active_block"]
          },

          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true, "$type": "string" },
                  "signature": { "$exists": true, "$type": "string" },
                  "card_id": {
                    "$exists": true,
                    "$type": "string"
                  }
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$match": {
                  "card_data": { "$ne": [] },
                  "card_data.status": "active"
                }
              },
              {
                "$addFields": {
                  "public_key": {
                    "$arrayElemAt": ["$card_data.public_key", 0]
                  },
                  "user_id": { "$arrayElemAt": ["$card_data.user_id", 0] },
                  "card_id": { "$arrayElemAt": ["$card_data.card_id", 0] }
                }
              },
              {
                "$addFields": {
                  "token_login": {
                    "token": { "$toString": { "$uuid": {} } },
                    "expires_at": {
                      "$dateAdd": {
                        "startDate": "$$NOW",
                        "unit": "hour",
                        "amount": 24
                      }
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "is_signature_valid": {
                    "$function": {
                      "body": "function(signature, public_key, qr_code) { const crypto = require('crypto'); const verify = crypto.createVerify('SHA256'); verify.update(qr_code); return verify.verify(public_key, signature, 'base64'); }",
                      "args": ["$signature", "$public_key", "$qr_code"],
                      "lang": "js"
                    }
                  }
                }
              },
              {
                "$set": {
                  "scan_attempts": { "$add": ["$scan_attempts", 1] }
                }
              },
              {
                "$match": {
                  "is_signature_valid": true
                }
              },

              {
                "$set": {
                  "token": { "$toString": { "$uuid": {} } },
                  "created_at": {
                    "$dateToString": {
                      "format": "%Y-%m-%dT%H:%M:%S",
                      "date": "$$NOW"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_login",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tạo token, quản lý user, và ghi log đăng nhập nếu người dùng không bị chặn",
            "data_input_from_node": ["collection_user_login"],
            "data_output_to_node": "collection_user_all"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_tests",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "UnifiedTestSchema",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "admin_card_id": {
              "type": "string",
              "unique": true,
              "description": "Mã định danh duy nhất của thẻ dành cho admin (định dạng AC-<ECDSA>)"
            },

            "admin_signature": {
              "type": "string",
              "description": "Chữ ký số được tạo bởi ví của người dùng là admin"
            },
            "test_id": { "type": "string" },
            "test_type": { "type": "string", "enum": ["listening", "reading"] },
            "level": {
              "type": "string",
              "enum": ["B1", "B2", "C1"]
            }
          },
          "required": ["_id", "test_id", "test_type"],
          "allOf": [
            {
              "if": { "properties": { "test_type": { "const": "listening" } } },
              "then": {
                "properties": {
                  "audio_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL của file audio. Trường này chứa URL của file audio, dù là từ upload hoặc nhập trực tiếp."
                  },
                  "questions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "question_id": { "type": "string" },
                        "question_text": { "type": "string" },
                        "options": {
                          "type": "array",
                          "items": { "type": "string" },
                          "minItems": 4,
                          "maxItems": 4
                        },
                        "correct_answer": { "type": "string" }
                      },
                      "required": [
                        "question_id",
                        "question_text",
                        "options",
                        "correct_answer",
                        "audio_url"
                      ]
                    }
                  }
                },
                "required": ["audio_url", "questions"]
              }
            },
            {
              "if": { "properties": { "test_type": { "const": "reading" } } },
              "then": {
                "properties": {
                  "instructions": { "type": "string" },
                  "passages": {
                    "type": "array",
                    "minItems": 4,
                    "maxItems": 4,
                    "items": {
                      "type": "object",
                      "properties": {
                        "passage_id": { "type": "string" },
                        "question_text": { "type": "string" },
                        "questions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "question_id": { "type": "string" },
                              "question_type": {
                                "type": "string",
                                "enum": ["multiple_choice", "short_answer"]
                              },
                              "text": { "type": "string" },
                              "options": {
                                "type": "array",
                                "items": { "type": "string" },
                                "minItems": 4,
                                "maxItems": 4
                              },
                              "correct_answer": { "type": "string" }
                            },
                            "required": [
                              "question_id",
                              "question_type",
                              "text",
                              "correct_answer"
                            ],
                            "allOf": [
                              {
                                "if": {
                                  "properties": {
                                    "question_type": {
                                      "const": "multiple_choice"
                                    }
                                  }
                                },
                                "then": {
                                  "required": ["options", "correct_answer"]
                                }
                              },
                              {
                                "if": {
                                  "properties": {
                                    "question_type": { "const": "short_answer" }
                                  }
                                },
                                "then": { "required": ["correct_answer"] }
                              }
                            ]
                          }
                        }
                      },
                      "required": ["passage_id", "question_text", "questions"]
                    }
                  }
                },
                "required": ["level", "instructions", "passages"]
              }
            }
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "TEST001",
            "admin_card_id": "AC-123456789",
            "admin_id": "ADMIN-102fd0c3-ed5b-44f6-86da-896b250ddcc9",
            "admin_signature": "MEUCIQDZsVvXl9z2...c3RvbSBzaWduYXR1cmU=",
            "test_id": "LISTEN001",
            "test_type": "listening",
            "level": "B1",
            "audio_url": "https://example.com/audio/test1.mp3",
            "questions": [
              {
                "question_id": "L001",
                "question_text": "What is the main idea of the audio?",
                "options": ["A", "B", "C", "D"],
                "correct_answer": "A"
              },
              {
                "question_id": "L002",
                "question_text": "What did the speaker say about the topic?",
                "options": ["A", "B", "C", "D"],
                "correct_answer": "C"
              }
            ]
          },
          {
            "_id": "TEST002",
            "admin_card_id": null,
            "admin_id": null,
            "admin_signature": null,
            "test_id": null,
            "test_type": null,
            "level": null,
            "audio_url": null,
            "questions": []
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "admin_collection_cards",
                  "localField": "admin_id",
                  "foreignField": "user_id",
                  "as": "admin_data"
                }
              },
              {
                "$unwind": "$admin_data"
              },
              {
                "$match": {
                  "$expr": {
                    "$eq": ["$admin_card_id", "$admin_data.card_id"]
                  }
                }
              },

              {
                "$addFields": {
                  "data_to_sign": {
                    "test_id": "$test_id",
                    "test_type": "$test_type"
                  }
                }
              },

              {
                "$addFields": {
                  "is_signature_valid": {
                    "$function": {
                      "body": "function(publicKey, data, signature) { const crypto = require('crypto'); const verify = crypto.createVerify('SHA256'); verify.update(JSON.stringify(data)); verify.end(); return verify.verify(publicKey, signature, 'base64'); }",
                      "args": [
                        "$admin_data.public_key",
                        "$data_to_sign",
                        "$admin_signature"
                      ],
                      "lang": "js"
                    }
                  }
                }
              },
              {
                "$match": {
                  "is_signature_valid": true
                }
              },

              {
                "$addFields": {
                  "has_permission": {
                    "$in": ["create_test", "$admin_data.permissions"]
                  }
                }
              },
              {
                "$match": {
                  "has_permission": true
                }
              }
            ],
            "purpose": "Xác thực admin_card_id, admin_id, admin_signature trong admin_collection_cards trước khi lưu bài kiểm tra",
            "data_input_from_node": [
              "admin_card_id",
              "admin_id",
              "admin_signature"
            ],
            "data_output_to_node": "collection_tests"
          },
          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "admin_collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "admin_data"
                }
              },
              {
                "$unwind": "$admin_data"
              },
              {
                "$match": {
                  "$expr": {
                    "$and": [
                      { "$eq": ["$card_id", "$admin_data.card_id"] },
                      { "$eq": ["$user_id", "$admin_data.user_id"] }
                    ]
                  }
                }
              },
              {
                "$lookup": {
                  "from": "login_collection",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "login_data"
                }
              },
              {
                "$unwind": "$login_data"
              },
              {
                "$match": {
                  "$expr": {
                    "$and": [
                      { "$eq": ["$card_id", "$login_data.card_id"] },
                      { "$gte": ["$$NOW", "$login_data.expires_at"] }
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "data_to_sign": {
                    "test_id": "$test_id",
                    "test_type": "$test_type",
                    "level": "$level"
                  }
                }
              },
              {
                "$addFields": {
                  "is_admin_signature_valid": {
                    "$function": {
                      "body": "function(publicKey, data, admin_signature) { const crypto = require('crypto'); const verify = crypto.createVerify('SHA256'); verify.update(JSON.stringify(data)); verify.end(); return verify.verify(publicKey, admin_signature, 'base64'); }",
                      "args": [
                        "$admin_data.public_key",
                        "$data_to_sign",
                        "$admin_signature"
                      ],
                      "lang": "js"
                    }
                  }
                }
              },
              {
                "$match": {
                  "is_admin_signature_valid": true
                }
              },
              {
                "$project": {
                  "data_to_sign": 0,
                  "admin_data": 0,
                  "login_data": 0,
                  "is_admin_signature_valid": 0
                }
              },
              {
                "$merge": {
                  "into": "collection_tests",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Xác thực card_id, user_id, admin_signature trong admin_collection_cards và kiểm tra token trong login_collection trước khi lưu bài kiểm tra",
            "data_input_from_node": [
              "collection_tests",
              "admin_collection_cards",
              "login_collection"
            ],
            "data_output_to_node": "collection_tests"
          },
          {
            "pipeline": [
              {
                "$match": {
                  "test_type": "listening"
                }
              },
              {
                "$addFields": {
                  "is_upload": {
                    "$cond": {
                      "if": { "$ne": ["$audio_url", null] },
                      "then": true,
                      "else": false
                    }
                  }
                }
              },
              {
                "$lookup": {
                  "from": "uploads",
                  "localField": "audio_url",
                  "foreignField": "_id",
                  "as": "uploaded_audio_info"
                }
              },
              {
                "$addFields": {
                  "processed_audio_url": {
                    "$cond": {
                      "if": "$is_upload",
                      "then": {
                        "$arrayElemAt": ["$uploaded_audio_info.url", 0]
                      },
                      "else": "$audio_url"
                    }
                  }
                }
              },
              {
                "$project": {
                  "audio_url": "$processed_audio_url",
                  "questions": 1,
                  "test_id": 1,
                  "test_type": 1,
                  "level": 1
                }
              },
              {
                "$merge": {
                  "into": "collection_tests",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline xử lý logic lưu trữ audio_url: nếu user upload file thì băm ra URL, nếu user cung cấp URL thì lưu trực tiếp.",
            "data_input_from_node": ["collection_tests", "uploads"],
            "data_output_to_node": "collection_tests"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_user_tests",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "UserTestSchema",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "user_id": { "type": "string" },
            "test_id": { "type": "string" },
            "test_type": { "type": "string", "enum": ["listening", "reading"] },
            "submission_time": { "type": "string", "format": "date-time" },
            "user_answers": {
              "type": "object",
              "properties": {
                "listening": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "question_id": { "type": "string" },
                      "user_answer": { "type": "string" },
                      "is_correct": { "type": "boolean" },
                      "correct_answer": { "type": "string" },
                      "audio_url": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL của file audio liên quan đến câu hỏi listening."
                      }
                    },
                    "required": [
                      "question_id",
                      "user_answer",
                      "is_correct",
                      "correct_answer",
                      "audio_url"
                    ]
                  },
                  "default": []
                },
                "reading": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "question_id": { "type": "string" },
                      "user_answer": { "type": "string" },
                      "is_correct": { "type": "boolean" },
                      "correct_answer": { "type": "string" }
                    },
                    "required": [
                      "question_id",
                      "user_answer",
                      "is_correct",
                      "correct_answer"
                    ]
                  },
                  "default": []
                }
              },
              "required": []
            },
            "token": {
              "type": "string",
              "description": "Token xác thực của người dùng."
            },
            "total_score": { "type": "integer", "minimum": 0, "maximum": 100 },
            "avg_score": { "type": "number", "minimum": 0, "maximum": 100 },
            "new_level": {
              "type": "string",
              "enum": ["B1", "B2", "C1", "C2"]
            },
            "is_eligible_for_mentorship": { "type": "boolean" },
            "is_completed": { "type": "boolean" },

            "post_test_actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["practice", "upload_test"]
              }
            }
          },
          "required": [
            "_id",
            "user_id",
            "test_id",
            "test_type",
            "submission_time",
            "user_answers",
            "total_score",
            "new_level",
            "is_eligible_for_mentorship",
            "token",
            "is_completed",
            "post_test_actions"
          ]
        },
        "jsonSample": [
          {
            "_id": "USER_TEST001",
            "user_id": "102fd0c3-ed5b-44f6-86da-896b250ddcc9",
            "test_id": "LISTEN001",
            "test_type": "listening",
            "submission_time": "2025-01-01T12:00:00Z",
            "user_answers": {
              "listening": [
                {
                  "question_id": "L001",
                  "user_answer": "A",
                  "is_correct": true,
                  "correct_answer": "A",
                  "audio_url": "https://example.com/audio/question1.mp3"
                }
              ],
              "reading": []
            },
            "token": "abc123xyz456",
            "total_score": 85,
            "avg_score": 85,
            "new_level": "B2",
            "is_eligible_for_mentorship": true,
            "is_completed": true,
            "post_test_actions": ["practice", "upload_test"]
          },
          {
            "_id": "USER_TEST002",
            "user_id": "102fd0c3-ed5b-44f6-86da-896b250ddcc9",
            "test_id": "READ001",
            "test_type": "reading",
            "submission_time": "2025-01-02T12:00:00Z",
            "user_answers": {
              "listening": [],
              "reading": [
                {
                  "question_id": "R001",
                  "user_answer": "B",
                  "is_correct": false,
                  "correct_answer": "C"
                }
              ]
            },
            "token": "def789uvw012",
            "total_score": 70,
            "avg_score": 70,
            "new_level": "B1",
            "is_eligible_for_mentorship": false,
            "is_completed": true,
            "post_test_actions": ["practice"]
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true, "$type": "string" },
                  "test_id": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_tests",
                  "localField": "test_id",
                  "foreignField": "test_id",
                  "as": "test_data"
                }
              },
              {
                "$unwind": "$test_data"
              },
              {
                "$addFields": {
                  "listening_scores": {
                    "$map": {
                      "input": "$user_answers.listening",
                      "as": "ans",
                      "in": {
                        "question_id": "$$ans.question_id",
                        "user_answer": "$$ans.user_answer",
                        "is_correct": {
                          "$eq": [
                            "$$ans.user_answer",
                            {
                              "$arrayElemAt": [
                                "$test_data.listening.questions.correct_answer",
                                {
                                  "$indexOfArray": [
                                    "$test_data.listening.questions.question_id",
                                    "$$ans.question_id"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "reading_scores": {
                    "$map": {
                      "input": "$user_answers.reading",
                      "as": "ans",
                      "in": {
                        "question_id": "$$ans.question_id",
                        "user_answer": "$$ans.user_answer",
                        "is_correct": {
                          "$eq": [
                            "$$ans.user_answer",
                            {
                              "$arrayElemAt": [
                                "$test_data.reading.questions.correct_answer",
                                {
                                  "$indexOfArray": [
                                    "$test_data.reading.questions.question_id",
                                    "$$ans.question_id"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "total_correct_listening": {
                    "$sum": {
                      "$map": {
                        "input": "$listening_scores",
                        "as": "q",
                        "in": {
                          "$cond": {
                            "if": "$$q.is_correct",
                            "then": 1,
                            "else": 0
                          }
                        }
                      }
                    }
                  },
                  "total_correct_reading": {
                    "$sum": {
                      "$map": {
                        "input": "$reading_scores",
                        "as": "q",
                        "in": {
                          "$cond": {
                            "if": "$$q.is_correct",
                            "then": 1,
                            "else": 0
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "$group": {
                  "_id": "$user_id",
                  "total_tests": { "$sum": 1 },
                  "total_score": { "$sum": "$total_score" }
                }
              },
              {
                "$addFields": {
                  "avg_score": {
                    "$cond": {
                      "if": { "$gt": ["$total_tests", 0] },
                      "then": { "$divide": ["$total_score", "$total_tests"] },
                      "else": 0
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "level_index": {
                    "$indexOfArray": [
                      ["B1", "B2", "C1", "C2"],
                      "$test_data.level"
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "lower_level": {
                    "$arrayElemAt": [
                      ["B1", "B2", "C1", "C2"],
                      { "$max": [{ "$subtract": ["$level_index", 1] }, 0] }
                    ]
                  },
                  "current_level": {
                    "$arrayElemAt": [["B1", "B2", "C1", "C2"], "$level_index"]
                  },
                  "higher_level": {
                    "$arrayElemAt": [
                      ["B1", "B2", "C1", "C2"],
                      { "$min": [{ "$add": ["$level_index", 1] }, 5] }
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "new_level": {
                    "$switch": {
                      "branches": [
                        {
                          "case": { "$lt": ["$avg_score", 5] },
                          "then": "$lower_level"
                        },
                        {
                          "case": {
                            "$and": [
                              { "$gte": ["$avg_score", 5] },
                              { "$lte": ["$avg_score", 7] }
                            ]
                          },
                          "then": "$current_level"
                        },
                        {
                          "case": { "$gt": ["$avg_score", 7] },
                          "then": "$higher_level"
                        }
                      ],
                      "default": "$current_level"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_tests",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tính điểm bài test của người dùng, xác định trình độ mới dựa trên điểm trung bình, và cập nhật vào collection_user_tests.",
            "data_input_from_node": [
              "collection_user_tests",
              "collection_tests"
            ],
            "data_output_to_node": "collection_user_tests"
          },
          {
            "pipeline": [
              {
                "$match": {
                  "post_test_actions": "upload_test",
                  "is_completed": true,
                  "avg_score": { "$exists": true }
                }
              },
              {
                "$addFields": {
                  "can_post_materials": {
                    "$cond": {
                      "if": { "$gte": ["$avg_score", 5] },
                      "then": true,
                      "else": false
                    }
                  },
                  "daily_upload_count": {
                    "$cond": {
                      "if": { "$eq": [{ "$size": "$user_uploads" }, 0] },
                      "then": 0,
                      "else": {
                        "$arrayElemAt": ["$user_uploads.daily_upload_count", -1]
                      }
                    }
                  }
                }
              },
              {
                "$match": {
                  "daily_upload_count": { "$lt": 3 }
                }
              },
              {
                "$merge": {
                  "into": "collection_practice_materials",
                  "on": "test_id",
                  "whenMatched": "keepExisting",
                  "whenNotMatched": {
                    "$set": {
                      "user_id": "$user_id",
                      "upload_date": "$$NOW",
                      "visibility": "pending"
                    }
                  }
                }
              }
            ],
            "purpose": "Xử lý đăng bài kiểm tra của người dùng.",
            "data_input_from_node": ["collection_user_tests"],
            "data_output_to_node": "collection_practice_materials"
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "new_level": { "$exists": true },
                  "is_completed": true
                }
              },
              {
                "$lookup": {
                  "from": "collection_mentors",
                  "let": {
                    "user_level": "$new_level"
                  },
                  "pipeline": [
                    {
                      "$match": {
                        "$expr": {
                          "$and": [
                            { "$eq": ["$status", "active"] },
                            { "$lt": ["$student_count", "$student_limit"] },
                            { "$in": ["$$user_level", ["B1", "B2", "C1"]] }
                          ]
                        }
                      }
                    },
                    {
                      "$sort": {
                        "rank": 1,
                        "student_count": 1
                      }
                    },
                    {
                      "$limit": 1
                    }
                  ],
                  "as": "eligible_mentors"
                }
              },
              {
                "$unwind": "$eligible_mentors"
              },
              {
                "$addFields": {
                  "mentor_id": "$eligible_mentors.user_id"
                }
              },
              {
                "$merge": {
                  "into": "collection_elite_partner",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tìm mentor phù hợp cho user sau khi hoàn thành bài test.",
            "data_input_from_node": ["collection_user_tests"],
            "data_output_to_node": ["collection_elite_partner"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_practice_materials",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "PracticeMaterialData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the document in MongoDB."
            },
            "user_id": {
              "type": "string",

              "description": "ID người dùng sở hữu thẻ"
            },
            "material_id": {
              "type": "string",
              "description": "The unique material identifier."
            },
            "upload_date": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the practice material was uploaded."
            },
            "level": {
              "type": "string",
              "enum": ["B1", "B2", "C1", "C2"],
              "description": "The difficulty level of the practice material."
            },
            "listening": {
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "object",
                "properties": {
                  "part": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 3
                  },
                  "audio_url": {
                    "type": "string",
                    "description": "Either a Base64-encoded audio file or a URL pointing to an audio file.",
                    "oneOf": [{ "format": "base64" }, { "format": "uri" }]
                  },
                  "questions": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 15,
                    "items": {
                      "type": "object",
                      "properties": {
                        "question_id": { "type": "string" },
                        "question_text": { "type": "string" },
                        "options": {
                          "type": "array",
                          "minItems": 3,
                          "maxItems": 5,
                          "items": { "type": "string" }
                        },
                        "correct_answer": { "type": "string" }
                      },
                      "required": [
                        "question_id",
                        "question_text",
                        "options",
                        "correct_answer"
                      ]
                    }
                  }
                },
                "required": ["part", "audio_url", "questions"]
              }
            },
            "reading": {
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "object",
                "properties": {
                  "part": { "type": "integer", "minimum": 1, "maximum": 4 },
                  "passage_id": { "type": "string" },
                  "text": { "type": "string" },
                  "questions": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 15,
                    "items": {
                      "type": "object",
                      "properties": {
                        "question_id": { "type": "string" },
                        "question_text": { "type": "string" },
                        "options": {
                          "type": "array",
                          "minItems": 3,
                          "maxItems": 5,
                          "items": { "type": "string" }
                        },
                        "correct_answer": { "type": "string" }
                      },
                      "required": [
                        "question_id",
                        "question_text",
                        "options",
                        "correct_answer"
                      ]
                    }
                  }
                },
                "required": ["part", "passage_id", "text", "questions"]
              }
            },
            "writing": {
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "object",
                "properties": {
                  "part": { "type": "integer", "minimum": 1, "maximum": 2 },
                  "prompt": { "type": "string" },
                  "sample_answer": { "type": "string" }
                },
                "required": ["part", "prompt", "sample_answer"]
              }
            },
            "speaking": {
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "object",
                "properties": {
                  "part": { "type": "integer", "minimum": 1, "maximum": 3 },
                  "prompt": { "type": "string" },
                  "sample_answer": { "type": "string" }
                },
                "required": ["part", "prompt", "sample_answer"]
              }
            },
            "visibility": {
              "type": "string",
              "enum": ["pending", "ready", "rejected"],
              "default": "pending",
              "description": "The visibility status of the material: pending, ready, or rejected."
            },
            "signature": {
              "type": "string",
              "description": "Digital signature to verify authorship."
            },
            "approvals": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "approver_id": {
                    "type": "string",
                    "description": "ID của người xác nhận."
                  },
                  "role": {
                    "type": "string",
                    "enum": ["inspector", "supervisor", "admin"]
                  },
                  "signature": {
                    "type": "string",
                    "description": "Chữ ký xác nhận."
                  },
                  "approved_at": { "type": "string", "format": "date-time" }
                },
                "required": ["approver_id", "role", "signature", "approved_at"]
              }
            },
            "rejection_reason": {
              "type": "string",
              "nullable": true,
              "description": "Lý do từ chối nếu có."
            },
            "attempt_count": {
              "type": "integer",
              "minimum": 0,
              "description": "The number of times users have attempted this practice material."
            }
          },
          "required": [
            "user_id",
            "upload_date",
            "level",
            "listening",
            "reading",
            "writing",
            "speaking",
            "signature"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "material_001",
            "user_id": "user_12345",
            "material_id": "mat_67890",
            "upload_date": "2023-10-15T14:35:00Z",
            "level": "B2",
            "listening": [
              {
                "part": 1,
                "audio_url": "https://example.com/audio/listening_part1.mp3",
                "questions": [
                  {
                    "question_id": "q1",
                    "question_text": "What is the main topic of the conversation?",
                    "options": [
                      "The importance of saving money.",
                      "How to invest in stocks.",
                      "Tips for planning a vacation.",
                      "Strategies for starting a business."
                    ],
                    "correct_answer": "The importance of saving money."
                  },
                  {
                    "question_id": "q2",
                    "question_text": "What does the man suggest about managing finances?",
                    "options": [
                      "Avoid using credit cards entirely.",
                      "Set aside a fixed amount each month.",
                      "Invest all savings into real estate.",
                      "Spend freely as long as income allows."
                    ],
                    "correct_answer": "Set aside a fixed amount each month."
                  }
                ]
              },
              {
                "part": 2,
                "audio_url": "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggND...",
                "questions": [
                  {
                    "question_id": "q3",
                    "question_text": "What is the woman's opinion about online shopping?",
                    "options": [
                      "It is convenient but often unreliable.",
                      "It saves time and offers great deals.",
                      "It is harmful to small local businesses.",
                      "It leads to unnecessary spending."
                    ],
                    "correct_answer": "It saves time and offers great deals."
                  }
                ]
              },
              {
                "part": 3,
                "audio_url": "https://example.com/audio/listening_part3.mp3",
                "questions": [
                  {
                    "question_id": "q4",
                    "question_text": "What is the purpose of the announcement?",
                    "options": [
                      "To promote a new product launch.",
                      "To inform customers about store hours.",
                      "To announce a special discount event.",
                      "To warn about potential scams."
                    ],
                    "correct_answer": "To announce a special discount event."
                  }
                ]
              }
            ],
            "reading": [
              {
                "part": 1,
                "passage_id": "passage_001",
                "text": "The Industrial Revolution was a period of major industrialization that took place during the late 18th and early 19th centuries. It began in Great Britain and later spread to other parts of the world. The revolution introduced new manufacturing processes, including the use of machinery and steam power, which significantly increased productivity.",
                "questions": [
                  {
                    "question_id": "q5",
                    "question_text": "What was the main cause of the Industrial Revolution?",
                    "options": [
                      "The discovery of electricity.",
                      "Advancements in agricultural techniques.",
                      "The invention of the steam engine.",
                      "Increased demand for handmade goods."
                    ],
                    "correct_answer": "The invention of the steam engine."
                  }
                ]
              },
              {
                "part": 2,
                "passage_id": "passage_002",
                "text": "Climate change is one of the most pressing issues of our time. It refers to significant changes in global temperatures and weather patterns over time. Human activities, such as burning fossil fuels and deforestation, have been identified as major contributors to this phenomenon.",
                "questions": [
                  {
                    "question_id": "q6",
                    "question_text": "What is the primary effect of climate change mentioned in the passage?",
                    "options": [
                      "Rising sea levels.",
                      "Increased frequency of natural disasters.",
                      "Loss of biodiversity.",
                      "Extreme weather conditions."
                    ],
                    "correct_answer": "Extreme weather conditions."
                  }
                ]
              },
              {
                "part": 3,
                "passage_id": "passage_003",
                "text": "Artificial intelligence (AI) is transforming industries worldwide by automating tasks, improving efficiency, and enabling new capabilities. From healthcare to transportation, AI technologies are being integrated into various sectors to solve complex problems.",
                "questions": [
                  {
                    "question_id": "q7",
                    "question_text": "What is the main advantage of AI according to the passage?",
                    "options": [
                      "It eliminates the need for human workers.",
                      "It solves complex problems across industries.",
                      "It reduces the cost of production significantly.",
                      "It enhances creativity in artistic fields."
                    ],
                    "correct_answer": "It solves complex problems across industries."
                  }
                ]
              },
              {
                "part": 4,
                "passage_id": "passage_004",
                "text": "The history of the Internet dates back to the 1960s when the U.S. Department of Defense developed ARPANET, an early network designed for communication between universities and research institutions. Over time, the Internet evolved into a global system connecting billions of devices.",
                "questions": [
                  {
                    "question_id": "q8",
                    "question_text": "What was the original purpose of the Internet?",
                    "options": [
                      "To provide entertainment content.",
                      "To connect researchers and share information.",
                      "To facilitate e-commerce transactions.",
                      "To enable social media platforms."
                    ],
                    "correct_answer": "To connect researchers and share information."
                  }
                ]
              }
            ],
            "writing": [
              {
                "part": 1,
                "prompt": "Write an essay discussing the impact of social media on society.",
                "sample_answer": "Social media has revolutionized the way people communicate and share information. While it offers numerous benefits, such as connecting individuals globally, it also raises concerns about privacy and mental health."
              },
              {
                "part": 2,
                "prompt": "Describe a memorable event in your life and explain why it was important.",
                "sample_answer": "One of the most memorable events in my life was when I graduated from university. It marked the culmination of years of hard work and opened doors to new opportunities."
              }
            ],
            "speaking": [
              {
                "part": 1,
                "prompt": "Talk about your favorite hobby and why you enjoy it.",
                "sample_answer": "My favorite hobby is reading because it helps me relax and expands my knowledge on various topics."
              },
              {
                "part": 2,
                "prompt": "Describe a person who has influenced you positively.",
                "sample_answer": "The person who has influenced me the most is my teacher, who always encouraged me to pursue my dreams and never give up."
              },
              {
                "part": 3,
                "prompt": "Discuss the advantages and disadvantages of remote work.",
                "sample_answer": "Remote work offers flexibility but can also lead to isolation and challenges in maintaining work-life balance."
              }
            ],
            "visibility": "ready",
            "signature": "abc123xyz",
            "attempt_count": 42
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "card_id": { "$exists": true, "$type": "string" },
                  "user_id": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_login",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_login_data"
                }
              },
              {
                "$unwind": "$user_login_data"
              },
              {
                "$match": {
                  "user_login_data.token_login.expires_at": { "$gt": "$$NOW" }
                }
              }
            ],
            "purpose": "kiểm tra xem người dùng có thẻ hay không",
            "data_input_from_node": ["collection_user_login"],

            "data_output_to_node": ["collection_practice_materials"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "visibility": "pending",
                  "user_id": { "$exists": true }
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$addFields": {
                  "signature": {
                    "$cond": [
                      { "$eq": ["$signature", true] },
                      { "$arrayElemAt": ["$card_data.signature", 0] },
                      "$signature"
                    ]
                  }
                }
              },
              {
                "$lookup": {
                  "from": "collection_practice_materials",
                  "let": {
                    "level": "$level",
                    "listening": "$listening",
                    "reading": "$reading",
                    "writing": "$writing",
                    "speaking": "$speaking"
                  },
                  "pipeline": [
                    {
                      "$expr": {
                        "$and": [
                          { "$eq": ["$level", "$$level"] },
                          { "$eq": ["$listening", "$$listening"] },
                          { "$eq": ["$reading", "$$reading"] },
                          { "$eq": ["$writing", "$$writing"] },
                          { "$eq": ["$speaking", "$$speaking"] }
                        ]
                      }
                    }
                  ],
                  "as": "duplicateMaterials"
                }
              },
              {
                "$addFields": {
                  "isDuplicate": { "$ne": ["$duplicateMaterials", []] }
                }
              },
              {
                "$match": {
                  "isDuplicate": false
                }
              },
              {
                "$lookup": {
                  "from": "collection_practice_materials",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "existing_materials"
                }
              },
              {
                "$addFields": {
                  "attempt_count": { "$size": "$existing_materials" }
                }
              },
              {
                "$addFields": {
                  "material_id": {
                    "$concat": [
                      "PracticeMaterials_",
                      "$user_id",
                      "_",
                      { "$toString": "$attempt_count" },
                      "_",
                      { "$toString": { "$toObjectId": "$$NOW" } }
                    ]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_practice_materials",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Lưu practice materials với kiểm tra trùng lặp và material_id tự sinh",
            "data_input_from_node": [
              "collection_cards",
              "collection_practice_materials"
            ],
            "data_output_to_node": ["collection_practice_materials"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "visibility": "pending",
                  "user_id": { "$exists": true },
                  "can_post_materials": true
                }
              },
              {
                "$lookup": {
                  "from": "collection_practice_materials",
                  "localField": "material_id",
                  "foreignField": "material_id",
                  "as": "existing_materials"
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_tests",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_test_data"
                }
              },
              {
                "$match": {
                  "user_test_data.can_post_materials": true
                }
              },
              {
                "$addFields": {
                  "is_duplicate": {
                    "$cond": {
                      "if": {
                        "$gt": [{ "$size": "$existing_materials" }, 0]
                      },
                      "then": true,
                      "else": false
                    }
                  }
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "signature",
                  "foreignField": "signature",
                  "as": "verified_signature"
                }
              },
              {
                "$addFields": {
                  "is_signature_valid": {
                    "$cond": {
                      "if": {
                        "$gt": [{ "$size": "$verified_signature" }, 0]
                      },
                      "then": true,
                      "else": false
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "is_vstep_compliant": {
                    "$and": [
                      { "$eq": [{ "$size": "$listening" }, 3] },
                      { "$eq": [{ "$size": "$reading" }, 4] },
                      { "$eq": [{ "$size": "$writing" }, 2] },
                      { "$eq": [{ "$size": "$speaking" }, 3] }
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "material_id": {
                    "$cond": {
                      "if": { "$eq": ["$material_id", null] },
                      "then": {
                        "$function": {
                          "body": "function() { return require('crypto').randomUUID(); }",
                          "args": [],
                          "lang": "js"
                        }
                      },

                      "else": "$material_id"
                    }
                  }
                }
              },
              {
                "$match": {
                  "listening.questions.audio_url": {
                    "$exists": true,
                    "$and": [
                      { "$ne": ["$$question.audio_url", null] },
                      { "$ne": ["$$question.audio_url", ""] }
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "listening.questions": {
                    "$map": {
                      "input": "$listening.questions",
                      "as": "question",
                      "in": {
                        "question_id": "$$question.question_id",
                        "audio_url": {
                          "$cond": {
                            "if": {
                              "$and": [
                                { "$ne": ["$$question.audio_url", null] },
                                { "$ne": ["$$question.audio_url", ""] }
                              ]
                            },
                            "then": {
                              "$cond": {
                                "if": {
                                  "$regexMatch": {
                                    "input": "$$question.audio_url",
                                    "regex": "^https?://",
                                    "options": "i"
                                  }
                                },
                                "then": "$$question.audio_url",
                                "else": "$$question.audio_url"
                              }
                            }
                          }
                        },
                        "audio_metadata": {
                          "$mergeObjects": [
                            "$$question.audio_metadata",
                            {
                              "file_name": {
                                "$ifNull": [
                                  "$$question.audio_metadata.file_name",
                                  "default_audio.mp3"
                                ]
                              },
                              "file_size": {
                                "$ifNull": [
                                  "$$question.audio_metadata.file_size",
                                  0
                                ]
                              },
                              "mime_type": {
                                "$ifNull": [
                                  "$$question.audio_metadata.mime_type",
                                  "audio/mp3"
                                ]
                              },
                              "uploaded_at": {
                                "$ifNull": [
                                  "$$question.audio_metadata.uploaded_at",
                                  "$$NOW"
                                ]
                              }
                            }
                          ]
                        },
                        "question_text": "$$question.question_text",
                        "options": "$$question.options",
                        "correct_answer": "$$question.correct_answer"
                      }
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "visibility": {
                    "$switch": {
                      "branches": [
                        {
                          "case": {
                            "$or": [
                              "$is_duplicate",
                              { "$not": "$is_signature_valid" }
                            ]
                          },
                          "then": "rejected"
                        },
                        {
                          "case": { "$not": "$is_vstep_compliant" },
                          "then": "rejected"
                        },
                        {
                          "case": {
                            "$and": [
                              "$is_vstep_compliant",
                              "$is_signature_valid",
                              { "$not": "$is_duplicate" }
                            ]
                          },
                          "then": "ready"
                        }
                      ],
                      "default": "pending"
                    }
                  },
                  "review_feedback": {
                    "$cond": {
                      "if": { "$eq": ["$visibility", "rejected"] },
                      "then": {
                        "$concatArrays": [
                          {
                            "$cond": {
                              "if": "$is_duplicate",
                              "then": ["Duplicate material."],
                              "else": []
                            }
                          },
                          {
                            "$cond": {
                              "if": { "$not": "$is_signature_valid" },
                              "then": ["Invalid signature."],
                              "else": []
                            }
                          },
                          {
                            "$cond": {
                              "if": { "$not": "$is_vstep_compliant" },
                              "then": ["Not compliant with VSTEP structure."],
                              "else": []
                            }
                          }
                        ]
                      },
                      "else": []
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "upload_date": {
                    "$cond": {
                      "if": { "$eq": ["$upload_date", null] },
                      "then": "$$NOW",
                      "else": "$upload_date"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_practice_materials",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Cho phép user đăng bài vào collection_practice_materials nếu đạt điểm trung bình >= 5.",
            "data_input_from_node": ["collection_user_tests"],
            "data_output_to_node": ["collection_practice_materials"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },
  {
    "_id": "collection_materials_user_done",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "UserCompletedMaterialData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the document in MongoDB."
            },
            "user_id": {
              "type": "string",
              "description": "ID người dùng đã hoàn thành phần thi."
            },
            "material_id": {
              "type": "string",
              "description": "ID của đề ôn tập (practice material)."
            },
            "section": {
              "type": "string",
              "enum": ["listening", "reading", "writing", "speaking"],
              "description": "Kỹ năng thi: listening, reading, writing, hoặc speaking."
            },
            "part": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4,
              "description": "Phần nhỏ trong kỹ năng thi (ví dụ: Listening Part 1)."
            },
            "submission_time": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian người dùng nộp bài."
            },
            "data": {
              "type": "object",
              "properties": {
                "listening": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "question_id": { "type": "string" },
                      "user_answer": { "type": "string" },
                      "correct_answer": { "type": "string" }
                    },
                    "required": ["question_id", "user_answer", "correct_answer"]
                  }
                },
                "reading": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "question_id": { "type": "string" },
                      "user_answer": { "type": "string" },
                      "correct_answer": { "type": "string" }
                    },
                    "required": ["question_id", "user_answer", "correct_answer"]
                  }
                },
                "writing": {
                  "type": "object",
                  "properties": {
                    "prompt": { "type": "string" },
                    "user_answer": { "type": "string" }
                  },
                  "required": ["prompt", "user_answer"]
                },
                "speaking": {
                  "type": "object",
                  "properties": {
                    "prompt": { "type": "string" },
                    "user_audio": {
                      "type": "string",
                      "contentEncoding": "base64",
                      "description": "Base64-encoded audio file for the entire listening part."
                    }
                  },
                  "required": ["prompt", "user_audio"]
                }
              }
            },
            "material_count": {
              "type": "integer",
              "minimum": 0,
              "description": "Số lượng bài tập người dùng đã làm trong ngày."
            },
            "remaining_attempts": {
              "type": "integer",
              "minimum": 0,
              "description": "Số lượt làm bài còn lại của người dùng."
            },
            "last_reset_time": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian cuối cùng reset hạn ngạch."
            },
            "is_completed": {
              "type": "boolean",
              "description": "Trạng thái hoàn thành phần thi."
            }
          },
          "required": [
            "_id",
            "user_id",
            "material_id",
            "section",
            "part",
            "submission_time",
            "data",
            "is_completed",
            "material_count",
            "remaining_attempts",
            "last_reset_time"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "60c72b2f9b1e8c001c8e4d3a",
            "user_id": "user123",
            "material_id": "material456",
            "section": "listening",
            "part": 1,
            "submission_time": "2025-01-01T10:00:00Z",
            "data": {
              "listening": [
                {
                  "question_id": "Q1",
                  "user_answer": "A",
                  "correct_answer": "A"
                }
              ],
              "reading": [],
              "writing": {
                "prompt": "Write about your favorite book.",
                "user_answer": "My favorite book is..."
              },
              "speaking": {
                "prompt": "Describe your daily routine.",
                "user_audio": "/9j/4AAQSkZJRgABAQEASABIAAD/..."
              }
            },
            "material_count": 3,
            "remaining_attempts": 2,
            "last_reset_time": null,
            "is_completed": false
          },
          {
            "_id": "60c72b2f9b1e8c001c8e4d3b",
            "user_id": "user456",
            "material_id": "material789",
            "section": "reading",
            "part": 2,
            "submission_time": "2025-01-01T11:00:00Z",
            "data": {
              "listening": [],
              "reading": [
                {
                  "question_id": "Q2",
                  "user_answer": "B",
                  "correct_answer": "C"
                }
              ],
              "writing": {
                "prompt": "Describe your favorite place.",
                "user_answer": "My favorite place is..."
              },
              "speaking": {
                "prompt": "Talk about your hobbies.",
                "user_audio": "/9j/4AAQSkZJRgABAQEASABIAAD/..."
              }
            },
            "material_count": 5,
            "remaining_attempts": 1,
            "last_reset_time": null,
            "is_completed": true
          },
          {
            "_id": "60c72b2f9b1e8c001c8e4d3c",
            "user_id": "user789",
            "material_id": "material012",
            "section": "writing",
            "part": 3,
            "submission_time": "2025-01-01T12:00:00Z",
            "data": {
              "listening": [],
              "reading": [],
              "writing": {
                "prompt": "Write about your travel experience.",
                "user_answer": "I traveled to..."
              },
              "speaking": {
                "prompt": "Explain a complex topic.",
                "user_audio": "/9j/4AAQSkZJRgABAQEASABIAAD/..."
              }
            },
            "material_count": 2,
            "remaining_attempts": 0,
            "last_reset_time": null,
            "is_completed": false
          },
          {
            "_id": "60c72b2f9b1e8c001c8e4d3d",
            "user_id": "user012",
            "material_id": "material345",
            "section": "speaking",
            "part": 4,
            "submission_time": "2025-01-01T13:00:00Z",
            "data": {
              "listening": [],
              "reading": [],
              "writing": {},
              "speaking": {
                "prompt": "Discuss a current event.",
                "user_audio": "/9j/4AAQSkZJRgABAQEASABIAAD/..."
              }
            },
            "material_count": 1,
            "remaining_attempts": 5,
            "last_reset_time": null,
            "is_completed": false
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "card_id": { "$exists": true, "$type": "string" },
                  "user_id": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_login",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_login_data"
                }
              },
              {
                "$unwind": "$user_login_data"
              },
              {
                "$match": {
                  "user_login_data.token_login.expires_at": { "$gt": "$$NOW" }
                }
              }
            ],
            "purpose": "kiểm tra xem người dùng có thẻ hay không",
            "data_input_from_node": ["collection_user_login"],

            "data_output_to_node": ["collection_materials_user_done"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true }
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$addFields": {
                  "has_remaining_attempts": {
                    "$cond": {
                      "if": { "$gt": ["$card_data.remaining_attempts", 0] },
                      "then": true,
                      "else": false
                    }
                  }
                }
              },
              {
                "$match": {
                  "has_remaining_attempts": true
                }
              },
              {
                "$merge": {
                  "into": "collection_materials_user_done",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },
              {
                "$facet": {
                  "allowed_users": [
                    {
                      "$match": {
                        "has_remaining_attempts": true
                      }
                    }
                  ],
                  "payment_required_users": [
                    {
                      "$match": {
                        "has_remaining_attempts": false
                      }
                    }
                  ]
                }
              },
              {
                "$project": {
                  "allowed_users": 1,
                  "payment_required_users": 1
                }
              }
            ],
            "purpose": "Kiểm tra người dùng có thẻ và có lượt làm bài hay không, nếu không thì yêu cầu thanh toán.",
            "data_input_from_node": ["collection_cards"],
            "data_output_to_node": [
              "collection_materials_user_done",
              " collection_user_transactions"
            ]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "material_id": { "$exists": true },
                  "section": {
                    "$in": ["listening", "reading", "writing", "speaking"]
                  },
                  "part": { "$exists": true }
                }
              },
              {
                "$lookup": {
                  "from": "collection_practice_materials",
                  "localField": "material_id",
                  "foreignField": "material_id",
                  "as": "material_data"
                }
              },
              {
                "$unwind": "$material_data"
              },
              {
                "$addFields": {
                  "data": {
                    "$cond": {
                      "if": { "$eq": ["$section", "listening"] },
                      "then": {
                        "$map": {
                          "input": "$answers",
                          "as": "ans",
                          "in": {
                            "question_id": "$$ans.question_id",
                            "user_answer": "$$ans.user_answer",
                            "correct_answer": {
                              "$arrayElemAt": [
                                "$material_data.listening.questions.correct_answer",
                                {
                                  "$indexOfArray": [
                                    "$material_data.listening.questions.question_id",
                                    "$$ans.question_id"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "else": {
                        "$cond": {
                          "if": { "$eq": ["$section", "reading"] },
                          "then": {
                            "$map": {
                              "input": "$answers",
                              "as": "ans",
                              "in": {
                                "question_id": "$$ans.question_id",
                                "user_answer": "$$ans.user_answer",
                                "correct_answer": {
                                  "$arrayElemAt": [
                                    "$material_data.reading.questions.correct_answer",
                                    {
                                      "$indexOfArray": [
                                        "$material_data.reading.questions.question_id",
                                        "$$ans.question_id"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "else": {
                            "$cond": {
                              "if": { "$eq": ["$section", "writing"] },
                              "then": {
                                "prompt": "$material_data.writing.prompt",
                                "user_answer": "$answers.user_answer"
                              },
                              "else": {
                                "prompt": "$material_data.speaking.prompt",
                                "user_audio": "$answers.user_audio"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },

              {
                "$addFields": {
                  "history_record": {
                    "$mergeObjects": [
                      "$history_record",
                      {
                        "card_id": "$card_id",
                        "user_id": "$user_id",
                        "material_id": "$material_id",
                        "section": "$section",
                        "part": "$part",
                        "submission_time": "$submission_time",
                        "data": "$data"
                      }
                    ]
                  }
                }
              },

              {
                "$addFields": {
                  "_id": { "$toString": { "$uuid": "" } }
                }
              },
              {
                "$merge": {
                  "into": "collection_materials_user_done",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Lưu thông tin chi tiết về phần thi mà người dùng đã hoàn thành vào collection_materials_user_done.",
            "data_input_from_node": ["collection_practice_materials"],
            "data_output_to_node": ["collection_materials_user_done"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "remaining_attempts": { "$gt": 0 },
                  "is_completed": false
                }
              },
              {
                "$addFields": {
                  "is_data_complete": {
                    "$allElementsTrue": {
                      "$map": {
                        "input": "$data",
                        "as": "item",
                        "in": {
                          "$and": [
                            { "$ne": ["$$item.question_id", null] },
                            { "$ne": ["$$item.user_answer", null] }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "$match": {
                  "is_data_complete": true
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$addFields": {
                  "is_completed": true,
                  "remaining_attempts": {
                    "$subtract": ["$remaining_attempts", 1]
                  },
                  "material_count": { "$add": ["$material_count", 1] }
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Cập nhật trạng thái hoàn thành phần thi và giảm số lượt làm bài còn lại.",
            "data_input_from_node": ["collection_materials_user_done"],
            "data_output_to_node": ["collection_cards"]
          },

          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "remaining_attempts": { "$gt": 0 }
                }
              },
              {
                "$addFields": {
                  "remaining_attempts": {
                    "$subtract": ["$remaining_attempts", 1]
                  },
                  "material_count": { "$add": ["$material_count", 1] },
                  "completed_materials": {
                    "$concatArrays": [
                      "$completed_materials",
                      [
                        {
                          "material_id": "MATERIAL1",
                          "section": "listening",
                          "submission_time": { "$now": [] },
                          "data": [
                            {
                              "question_id": "L1",
                              "user_answer": "B. Travel"
                            }
                          ]
                        }
                      ]
                    ]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Giảm số lượt làm bài còn lại và lưu thông tin bài tập đã hoàn thành.",
            "data_input_from_node": ["collection_materials_user_done"],
            "data_output_to_node": ["collection_cards"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_user_practice_results",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "UserPracticeResultData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the document in MongoDB."
            },
            "user_id": {
              "type": "string",
              "description": "ID người dùng đã hoàn thành bài thi."
            },
            "material_id": {
              "type": "string",
              "description": "ID của đề ôn tập (practice material)."
            },
            "submission_time": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian người dùng nộp bài."
            },
            "skill_scores": {
              "type": "object",
              "properties": {
                "listening": {
                  "type": "object",
                  "properties": {
                    "part_1": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_2": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_3": { "type": "integer", "minimum": 0, "maximum": 25 }
                  },
                  "required": ["part_1", "part_2", "part_3"]
                },
                "reading": {
                  "type": "object",
                  "properties": {
                    "part_1": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_2": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_3": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_4": { "type": "integer", "minimum": 0, "maximum": 25 }
                  },
                  "required": ["part_1", "part_2", "part_3", "part_4"]
                },
                "writing": {
                  "type": "object",
                  "properties": {
                    "part_1": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_2": { "type": "integer", "minimum": 0, "maximum": 25 }
                  },
                  "required": ["part_1", "part_2"]
                },
                "speaking": {
                  "type": "object",
                  "properties": {
                    "part_1": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_2": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "part_3": { "type": "integer", "minimum": 0, "maximum": 25 }
                  },
                  "required": ["part_1", "part_2", "part_3"]
                }
              },
              "required": ["listening", "reading", "writing", "speaking"]
            },
            "total_score": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "description": "Tổng điểm của bài thi."
            }
          },
          "required": [
            "_id",
            "user_id",
            "material_id",
            "submission_time",
            "skill_scores",
            "total_score"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "67b31d2e8a524196aa2d02e3",
            "user_id": "USER123",
            "material_id": "MATERIAL123",
            "submission_time": "2025-02-14T18:26:02.588Z",
            "skill_scores": {
              "listening": {
                "part_1": 10,
                "part_2": 8,
                "part_3": 7
              },
              "reading": {
                "part_1": 6,
                "part_2": 7,
                "part_3": 5,
                "part_4": 2
              },
              "writing": {
                "part_1": 12,
                "part_2": 8
              },
              "speaking": {
                "part_1": 10,
                "part_2": 8,
                "part_3": 7
              }
            },
            "total_score": 90
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "material_id": { "$exists": true },
                  "user_answers": { "$exists": true }
                }
              },
              {
                "$match": {
                  "section": { "$in": ["listening", "reading"] },
                  "data": { "$exists": true }
                }
              },
              {
                "$lookup": {
                  "from": "collection_practice_materials",
                  "localField": "material_id",
                  "foreignField": "material_id",
                  "as": "test_data"
                }
              },
              {
                "$unwind": "$test_data"
              },
              {
                "$addFields": {
                  "listening_scores": {
                    "$map": {
                      "input": "$user_answers.listening",
                      "as": "ans",
                      "in": {
                        "part": "$$ans.part",
                        "score": {
                          "$cond": {
                            "if": {
                              "$eq": [
                                "$$ans.user_answer",
                                {
                                  "$arrayElemAt": [
                                    "$test_data.listening.questions.correct_answer",
                                    {
                                      "$indexOfArray": [
                                        "$test_data.listening.questions.question_id",
                                        "$$ans.question_id"
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            "then": 1,
                            "else": 0
                          }
                        }
                      }
                    },
                    "$cond": {
                      "if": { "$eq": ["$section", "listening"] },
                      "then": {
                        "$map": {
                          "input": "$data.listening",
                          "as": "q",
                          "in": {
                            "question_id": "$$q.question_id",
                            "score": {
                              "$cond": {
                                "if": {
                                  "$eq": [
                                    "$$q.user_answer",
                                    "$$q.correct_answer"
                                  ]
                                },
                                "then": 1,
                                "else": 0
                              }
                            }
                          }
                        }
                      },
                      "else": []
                    }
                  },
                  "reading_scores": {
                    "$map": {
                      "input": "$user_answers.reading",
                      "as": "ans",
                      "in": {
                        "part": "$$ans.part",
                        "score": {
                          "$cond": {
                            "if": {
                              "$eq": [
                                "$$ans.user_answer",
                                {
                                  "$arrayElemAt": [
                                    "$test_data.reading.questions.correct_answer",
                                    {
                                      "$indexOfArray": [
                                        "$test_data.reading.questions.question_id",
                                        "$$ans.question_id"
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            "then": 1,
                            "else": 0
                          }
                        }
                      }
                    },
                    "$cond": {
                      "if": { "$eq": ["$section", "reading"] },
                      "then": {
                        "$map": {
                          "input": "$data.reading",
                          "as": "q",
                          "in": {
                            "question_id": "$$q.question_id",
                            "score": {
                              "$cond": {
                                "if": {
                                  "$eq": [
                                    "$$q.user_answer",
                                    "$$q.correct_answer"
                                  ]
                                },
                                "then": 1,
                                "else": 0
                              }
                            }
                          }
                        }
                      },
                      "else": []
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "skill_scores": {
                    "listening": {
                      "part_1": {
                        "$sum": {
                          "$filter": {
                            "input": "$listening_scores",
                            "as": "q",
                            "cond": { "$eq": ["$$q.part", 1] }
                          }
                        }
                      },
                      "part_2": {
                        "$sum": {
                          "$filter": {
                            "input": "$listening_scores",
                            "as": "q",
                            "cond": { "$eq": ["$$q.part", 2] }
                          }
                        }
                      },
                      "part_3": {
                        "$sum": {
                          "$filter": {
                            "input": "$listening_scores",
                            "as": "q",
                            "cond": { "$eq": ["$$q.part", 3] }
                          }
                        }
                      }
                    },
                    "reading": {
                      "part_1": {
                        "$sum": {
                          "$filter": {
                            "input": "$reading_scores",
                            "as": "q",
                            "cond": { "$eq": ["$$q.part", 1] }
                          }
                        }
                      },
                      "part_2": {
                        "$sum": {
                          "$filter": {
                            "input": "$reading_scores",
                            "as": "q",
                            "cond": { "$eq": ["$$q.part", 2] }
                          }
                        }
                      },
                      "part_3": {
                        "$sum": {
                          "$filter": {
                            "input": "$reading_scores",
                            "as": "q",
                            "cond": { "$eq": ["$$q.part", 3] }
                          }
                        }
                      },
                      "part_4": {
                        "$sum": {
                          "$filter": {
                            "input": "$reading_scores",
                            "as": "q",
                            "cond": { "$eq": ["$$q.part", 4] }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "total_listening_score": {
                    "$sum": "$listening_scores.score"
                  },
                  "total_reading_score": {
                    "$sum": "$reading_scores.score"
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_practice_results",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tính điểm tự động cho Listening và Reading dựa trên đáp án đúng từ collection_practice_materials.",
            "data_input_from_node": ["collection_practice_materials"],
            "data_output_to_node": ["collection_user_practice_results"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "material_id": { "$exists": true },
                  "user_answers.writing": { "$exists": true },
                  "user_answers.speaking": { "$exists": true }
                }
              },
              {
                "$match": {
                  "section": { "$in": ["writing", "speaking"] },
                  "data": { "$exists": true }
                }
              },
              {
                "$addFields": {
                  "writing_submissions": {
                    "$map": {
                      "input": "$user_answers.writing",
                      "as": "part",
                      "in": {
                        "part_id": "$$part.part",
                        "user_answer": "$$part.user_answer",
                        "status": "pending_review"
                      }
                    },
                    "$cond": {
                      "if": { "$eq": ["$section", "writing"] },
                      "then": {
                        "$map": {
                          "input": "$data.writing",
                          "as": "part",
                          "in": {
                            "prompt": "$$part.prompt",
                            "user_answer": "$$part.user_answer",
                            "status": "pending_review"
                          }
                        }
                      },
                      "else": []
                    }
                  },
                  "speaking_submissions": {
                    "$map": {
                      "input": "$user_answers.speaking",
                      "as": "part",
                      "in": {
                        "part_id": "$$part.part",
                        "user_audio": "$$part.user_audio",
                        "status": "pending_review"
                      }
                    },
                    "$cond": {
                      "if": { "$eq": ["$section", "speaking"] },
                      "then": {
                        "$map": {
                          "input": "$data.speaking",
                          "as": "part",
                          "in": {
                            "prompt": "$$part.prompt",
                            "user_audio": "$$part.user_audio",
                            "status": "pending_review"
                          }
                        }
                      },
                      "else": []
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_practice_results",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Lưu câu trả lời viết và ghi âm nói, yêu cầu review để tính điểm.",
            "data_input_from_node": ["collection_user_tests"],
            "data_output_to_node": ["collection_user_practice_results"]
          },
          {
            "pipeline": [
              {
                "$addFields": {
                  "total_score": {
                    "$sum": [
                      "$skill_scores.listening.part_1",
                      "$skill_scores.listening.part_2",
                      "$skill_scores.listening.part_3",
                      "$skill_scores.reading.part_1",
                      "$skill_scores.reading.part_2",
                      "$skill_scores.reading.part_3",
                      "$skill_scores.reading.part_4",
                      "$skill_scores.writing.part_1",
                      "$skill_scores.writing.part_2",
                      "$skill_scores.speaking.part_1",
                      "$skill_scores.speaking.part_2",
                      "$skill_scores.speaking.part_3"
                    ]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_practice_results",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tính tổng điểm và cập nhật kết quả cuối cùng vào collection_user_practice_results.",
            "data_input_from_node": ["collection_user_practice_results"],
            "data_output_to_node": ["collection_user_practice_results"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_save_user_vocabulary",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "Save Vocabulary to User Collection",
          "type": "object",
          "properties": {
            "word": {
              "type": "array",
              "title": "List of Words",
              "description": "List of user words with details.",
              "items": {
                "type": "object",
                "properties": {
                  "word": {
                    "type": "string",
                    "title": "Word",
                    "description": "The English word to save.",
                    "minLength": 1
                  },
                  "partOfSpeech": {
                    "type": "string",
                    "title": "Part of Speech",
                    "description": "The part of speech of the word (e.g., noun, verb, adjective)."
                  },
                  "translation": {
                    "type": "string",
                    "title": "Translation",
                    "description": "Vietnamese or native language translation of the word."
                  },
                  "exampleSentences": {
                    "type": "array",
                    "title": "Example Sentences",
                    "description": "Example sentences using the word.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  }
                },
                "required": ["word"]
              }
            },
            "userID": {
              "type": "string",
              "title": "User ID",
              "description": "The unique identifier of the user saving the word."
            },
            "family_word": {
              "type": "array",
              "title": "Family Words",
              "description": "List of family words with details.",
              "items": {
                "type": "object",
                "properties": {
                  "word": {
                    "type": "string",
                    "title": "Word",
                    "description": "A related word from the same word family."
                  },
                  "partOfSpeech": {
                    "type": "string",
                    "title": "Part of Speech",
                    "description": "The part of speech of the family word."
                  },
                  "translation": {
                    "type": "string",
                    "title": "Translation",
                    "description": "Vietnamese or native language translation of the family word."
                  },
                  "exampleSentences": {
                    "type": "array",
                    "title": "Example Sentences",
                    "description": "Example sentences using the family word.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  }
                },
                "required": ["word"]
              }
            },
            "synonyms": {
              "type": "array",
              "title": "Synonyms",
              "description": "List of synonyms with details.",
              "items": {
                "type": "object",
                "properties": {
                  "word": {
                    "type": "string",
                    "title": "Word",
                    "description": "A synonym of the main word."
                  },
                  "partOfSpeech": {
                    "type": "string",
                    "title": "Part of Speech",
                    "description": "The part of speech of the synonym."
                  },
                  "translation": {
                    "type": "string",
                    "title": "Translation",
                    "description": "Vietnamese or native language translation of the synonym."
                  },
                  "exampleSentences": {
                    "type": "array",
                    "title": "Example Sentences",
                    "description": "Example sentences using the synonym.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  }
                },
                "required": ["word"]
              }
            },
            "antonyms": {
              "type": "array",
              "title": "Antonyms",
              "description": "List of antonyms with details.",
              "items": {
                "type": "object",
                "properties": {
                  "word": {
                    "type": "string",
                    "title": "Word",
                    "description": "An antonym of the main word."
                  },
                  "partOfSpeech": {
                    "type": "string",
                    "title": "Part of Speech",
                    "description": "The part of speech of the antonym."
                  },
                  "translation": {
                    "type": "string",
                    "title": "Translation",
                    "description": "Vietnamese or native language translation of the antonym."
                  },
                  "exampleSentences": {
                    "type": "array",
                    "title": "Example Sentences",
                    "description": "Example sentences using the antonym.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  }
                },
                "required": ["word"]
              }
            }
          },
          "required": ["word", "userID"]
        },
        "jsonSample": [
          {
            "word": [
              {
                "word": "happy",
                "partOfSpeech": "adjective",
                "translation": "vui vẻ",
                "exampleSentences": [
                  "She feels happy today.",
                  "It's a happy moment."
                ]
              }
            ],
            "userID": "user123",
            "family_word": [
              {
                "word": "happiness",
                "partOfSpeech": "noun",
                "translation": "hạnh phúc",
                "exampleSentences": [
                  "Happiness is important.",
                  "She found true happiness."
                ]
              }
            ],
            "synonyms": [
              {
                "word": "joyful",
                "partOfSpeech": "adjective",
                "translation": "vui vẻ",
                "exampleSentences": ["He is joyful every morning."]
              }
            ],
            "antonyms": [
              {
                "word": "sad",
                "partOfSpeech": "adjective",
                "translation": "buồn",
                "exampleSentences": ["She feels sad after the news."]
              }
            ]
          }
        ]
      }
    },

    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "card_id": { "$exists": true, "$type": "string" },
                  "user_id": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_login",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_login_data"
                }
              },
              {
                "$unwind": "$user_login_data"
              },
              {
                "$match": {
                  "user_login_data.token_login.expires_at": { "$gt": "$$NOW" }
                }
              }
            ],
            "purpose": "kiểm tra xem người dùng có thẻ hay không",
            "data_input_from_node": ["collection_user_login"],

            "data_output_to_node": ["collection_save_user_vocabulary"]
          },
          {
            "pipeline": [
              {
                "$addFields": {
                  "createdAt": "$$NOW",
                  "updatedAt": "$$NOW"
                }
              },
              {
                "$merge": {
                  "into": "collection_save_user_vocabulary",
                  "on": ["userId"],
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tạo mới hoặc cập nhật từ vựng người dùng",
            "data_input_from_node": ["user_input_vocabulary"],
            "data_output_to_node": ["collection_save_user_vocabulary"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "userId": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_save_user_vocabulary",
                  "localField": "userId",
                  "foreignField": "userId",
                  "as": "user_vocab"
                }
              },
              {
                "$unwind": "$user_vocab"
              }
            ],
            "purpose": "Lấy danh sách từ vựng người dùng",
            "data_input_from_node": ["collection_user_login"],
            "data_output_to_node": ["user_vocab"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "_id": { "$exists": true, "$type": "objectId" }
                }
              },
              {
                "$addFields": {
                  "updatedAt": "$$NOW"
                }
              },
              {
                "$merge": {
                  "into": "collection_save_user_vocabulary",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "discard"
                }
              }
            ],
            "purpose": "Cập nhật từ vựng",
            "data_input_from_node": ["edit_vocabulary"],
            "data_output_to_node": ["collection_save_user_vocabulary"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "_id": { "$exists": true, "$type": "objectId" }
                }
              },
              {
                "$merge": {
                  "into": "temp_deleted_vocab",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Xóa từ vựng người dùng",
            "data_input_from_node": ["delete_vocabulary"],
            "data_output_to_node": ["temp_deleted_vocab"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_user_writing",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "UserWritingData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the user writing record."
            },
            "user_id": {
              "type": "string",
              "description": "ID of the user who wrote the essay."
            },
            "topic_id": {
              "type": "string",
              "description": "The ID of the randomly selected topic."
            },
            "written_essay": {
              "type": "string",
              "description": "The essay written by the user."
            },
            "reactions": {
              "type": "object",
              "properties": {
                "like": {
                  "type": "integer",
                  "description": "Number of likes received."
                },
                "love": {
                  "type": "integer",
                  "description": "Number of loves received."
                },
                "wow": {
                  "type": "integer",
                  "description": "Number of wows received."
                },
                "angry": {
                  "type": "integer",
                  "description": "Number of angry reactions received."
                },
                "haha": {
                  "type": "integer",
                  "description": "Number of haha reactions received."
                }
              },
              "required": ["like", "love", "wow", "angry", "haha"],
              "additionalProperties": false,
              "description": "Reactions received for the essay."
            },
            "reaction_analysis": {
              "type": "object",
              "properties": {
                "api_request": {
                  "type": "object",
                  "properties": {
                    "input_text": {
                      "type": "string",
                      "description": "Input text sent to the API (typically the written essay)."
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the API request was made."
                    }
                  },
                  "required": ["input_text", "timestamp"],
                  "additionalProperties": false,
                  "description": "Details of the API request to the Facebook Reaction model."
                },
                "api_response": {
                  "type": "object",
                  "properties": {
                    "predicted_reactions": {
                      "type": "object",
                      "properties": {
                        "like": {
                          "type": "number",
                          "description": "Predicted number of likes."
                        },
                        "love": {
                          "type": "number",
                          "description": "Predicted number of loves."
                        },
                        "wow": {
                          "type": "number",
                          "description": "Predicted number of wows."
                        },
                        "angry": {
                          "type": "number",
                          "description": "Predicted number of angry reactions."
                        },
                        "haha": {
                          "type": "number",
                          "description": "Predicted number of haha reactions."
                        }
                      },
                      "required": ["like", "love", "wow", "angry", "haha"],
                      "additionalProperties": false,
                      "description": "Predicted reactions from the Facebook Reaction model."
                    },
                    "confidence_scores": {
                      "type": "object",
                      "properties": {
                        "like": {
                          "type": "number",
                          "description": "Confidence score for predicted likes."
                        },
                        "love": {
                          "type": "number",
                          "description": "Confidence score for predicted loves."
                        },
                        "wow": {
                          "type": "number",
                          "description": "Confidence score for predicted wows."
                        },
                        "angry": {
                          "type": "number",
                          "description": "Confidence score for predicted angry reactions."
                        },
                        "haha": {
                          "type": "number",
                          "description": "Confidence score for predicted haha reactions."
                        }
                      },
                      "required": ["like", "love", "wow", "angry", "haha"],
                      "additionalProperties": false,
                      "description": "Confidence scores for the predicted reactions."
                    },
                    "status_code": {
                      "type": "integer",
                      "description": "HTTP status code returned by the API."
                    },
                    "response_time": {
                      "type": "number",
                      "description": "Response time of the API in milliseconds."
                    }
                  },
                  "required": [
                    "predicted_reactions",
                    "confidence_scores",
                    "status_code",
                    "response_time"
                  ],
                  "additionalProperties": false,
                  "description": "Details of the API response from the Facebook Reaction model."
                }
              },
              "required": ["api_request", "api_response"],
              "additionalProperties": false,
              "description": "Analysis of reactions using the Facebook Reaction model."
            }
          },
          "required": [
            "_id",
            "user_id",
            "topic_id",
            "written_essay",
            "reactions",
            "reaction_analysis"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "664f3b90123abc456def7890",
            "user_id": "user_123456",
            "topic_id": "topic_98765",
            "written_essay": "In recent years, the impact of technology on education has been significant. Online learning platforms have made education more accessible, though challenges remain in engagement and assessment...",
            "reactions": {
              "like": 12,
              "love": 7,
              "wow": 3,
              "angry": 0,
              "haha": 2
            },
            "reaction_analysis": {
              "api_request": {
                "input_text": "In recent years, the impact of technology on education has been significant. Online learning platforms have made education more accessible, though challenges remain in engagement and assessment...",
                "timestamp": "2025-05-24T07:00:00Z"
              },
              "api_response": {
                "predicted_reactions": {
                  "like": 10.5,
                  "love": 6.2,
                  "wow": 2.1,
                  "angry": 0.0,
                  "haha": 1.3
                },
                "confidence_scores": {
                  "like": 0.92,
                  "love": 0.87,
                  "wow": 0.76,
                  "angry": 0.99,
                  "haha": 0.63
                },
                "status_code": 200,
                "response_time": 185.7
              }
            }
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "card_id": { "$exists": true, "$type": "string" },
                  "user_id": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_login",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_login_data"
                }
              },
              {
                "$unwind": "$user_login_data"
              },
              {
                "$match": {
                  "user_login_data.token_login.expires_at": { "$gt": "$$NOW" }
                }
              }
            ],
            "purpose": "kiểm tra xem người dùng có thẻ hay không",
            "data_input_from_node": ["collection_user_login"],

            "data_output_to_node": ["collection_user_writing"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "status": "active"
                }
              },
              {
                "$sample": {
                  "size": 1
                }
              },
              {
                "$project": {
                  "_id": 0,
                  "topic_id": "$_id",
                  "topic_title": "$title",
                  "topic_description": "$description"
                }
              }
            ],
            "purpose": "Chọn ngẫu nhiên một chủ đề từ collection_writing_topics.",
            "data_input_from_node": ["collection_writing_topics"],
            "data_output_to_node": ["collection_user_writing"]
          },
          {
            "pipeline": [
              {
                "$addFields": {
                  "api_request": {
                    "input_text": "$written_essay",
                    "timestamp": {
                      "$dateToString": {
                        "format": "%Y-%m-%dT%H:%M:%S.%LZ",
                        "date": "$$NOW"
                      }
                    }
                  }
                }
              },
              {
                "$lookup": {
                  "from": "http_api",
                  "let": {
                    "url": "https://www.kaggle.com/models/buixuanloc/facebook-reaction ",
                    "input_text": "$api_request.input_text"
                  },
                  "pipeline": [
                    {
                      "$http": {
                        "method": "POST",
                        "url": "$$url",
                        "body": { "input_text": "$$input_text" },
                        "headers": { "Content-Type": "application/json" }
                      }
                    }
                  ],
                  "as": "api_response"
                }
              },
              { "$unwind": "$api_response" },
              {
                "$addFields": {
                  "reaction_analysis": {
                    "api_request": "$api_request",
                    "api_response": {
                      "predicted_reactions": "$api_response.body.predicted_reactions",
                      "confidence_scores": "$api_response.body.confidence_scores",
                      "status_code": "$api_response.status_code",
                      "response_time": "$api_response.response_time"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_writing",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Gọi API mô hình Facebook Reaction và lưu kết quả phân tích phản ứng.",
            "data_input_from_node": ["collection_user_writing"],
            "data_output_to_node": ["collection_user_writing"]
          },
          {
            "pipeline": [
              {
                "$addFields": {
                  "total_score": {
                    "$min": [
                      10,
                      {
                        "$max": [
                          0,
                          {
                            "$subtract": [
                              {
                                "$sum": [
                                  "$reactions.like",
                                  "$reactions.love",
                                  "$reactions.wow",
                                  "$reactions.haha"
                                ]
                              },
                              {
                                "$multiply": ["$reactions.angry", 2]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "$project": {
                  "_id": 1,
                  "user_id": 1,
                  "topic_id": 1,
                  "written_essay": 1,
                  "reactions": 1,
                  "total_score": 1
                }
              }
            ],
            "purpose": "Tính toán tổng điểm dựa trên phản ứng và lưu vào cơ sở dữ liệu.",
            "data_input_from_node": ["conAI_url"],
            "data_output_to_node": ["collection_user_writing"]
          },
          {
            "pipeline": [
              {
                "$merge": {
                  "into": "collection_user_writing",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Lưu kết quả bài thi viết vào collection_user_writing.",
            "data_input_from_node": ["collection_user_writing"],
            "data_output_to_node": []
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_leaderboard",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "LeaderboardData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the document in MongoDB."
            },
            "user_id": {
              "type": "string",
              "description": "The unique user identifier.",
              "unique": true
            },
            "leaderboard_score": {
              "type": "number",
              "minimum": 0,
              "description": "The total score of the user for the leaderboard, calculated as 0.7 * practice score + 0.3 * writing score."
            },
            "rank": {
              "type": "integer",
              "minimum": 1,
              "description": "The current rank of the user on the leaderboard."
            },
            "current_streak": {
              "type": "integer",
              "minimum": 0,
              "description": "The number of consecutive weeks the user has maintained or improved their rank."
            },
            "longest_streak": {
              "type": "integer",
              "minimum": 0,
              "description": "The longest streak of consecutive weeks the user has maintained or improved their rank."
            },
            "last_rank": {
              "type": "integer",
              "minimum": 1,
              "description": "The rank of the user from the previous leaderboard update."
            },
            "top10_history": {
              "type": "object",
              "properties": {
                "entered_top10_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The timestamp when the user entered the top 10."
                },
                "time_in_top10": {
                  "type": "number",
                  "minimum": 0,
                  "description": "The total time (in days) the user has spent in the top 10."
                }
              },
              "required": ["entered_top10_at", "time_in_top10"],
              "description": "History of the user's presence in the top 10."
            },
            "last_reset_time": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of the last leaderboard reset."
            }
          },
          "required": [
            "_id",
            "user_id",
            "leaderboard_score",
            "rank",
            "current_streak",
            "longest_streak",
            "last_rank",
            "top10_history",
            "last_reset_time"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "USER_LB_001",
            "user_id": "81f204d0-5ef7-4dd0-adfe-69f8f83860db",
            "leaderboard_score": 85.3,
            "rank": 3,
            "current_streak": 4,
            "longest_streak": 6,
            "last_rank": 5,
            "top10_history": {
              "entered_top10_at": "2025-02-14T18:26:02.588Z",
              "time_in_top10": 7
            },
            "last_reset_time": "2025-02-14T02:00:00.000Z"
          },
          {
            "_id": "USER_LB_002",
            "user_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
            "leaderboard_score": 92.7,
            "rank": 1,
            "current_streak": 10,
            "longest_streak": 10,
            "last_rank": 1,
            "top10_history": {
              "entered_top10_at": "2025-02-07T18:26:02.588Z",
              "time_in_top10": 14
            },
            "last_reset_time": "2025-02-14T02:00:00.000Z"
          },
          {
            "_id": "USER_LB_003",
            "user_id": "f9e8d7c6-b5a4-3210-9876-543210fedcba",
            "leaderboard_score": 68.2,
            "rank": 7,
            "current_streak": 1,
            "longest_streak": 3,
            "last_rank": 8,
            "top10_history": {
              "entered_top10_at": null,
              "time_in_top10": 0
            },
            "last_reset_time": "2025-02-14T02:00:00.000Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "card_id": { "$exists": true, "$type": "string" },
                  "user_id": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_login",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_login_data"
                }
              },
              {
                "$unwind": "$user_login_data"
              },
              {
                "$match": {
                  "user_login_data.token_login.expires_at": { "$gt": "$$NOW" }
                }
              }
            ],
            "purpose": "kiểm tra xem người dùng có thẻ hay không",
            "data_input_from_node": ["collection_user_login"],

            "data_output_to_node": ["collection_leaderboard"]
          },
          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "collection_user_practice_results",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "practice_results"
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_writing",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "writing_results"
                }
              },
              {
                "$addFields": {
                  "total_practice_score": {
                    "$sum": "$practice_results.total_score"
                  },
                  "total_writing_score": {
                    "$max": "$writing_results.total_score"
                  }
                }
              },
              {
                "$addFields": {
                  "leaderboard_score": {
                    "$add": [
                      { "$multiply": [0.7, "$total_practice_score"] },
                      { "$multiply": [0.3, "$total_writing_score"] }
                    ]
                  }
                }
              },
              {
                "$project": {
                  "_id": 1,
                  "user_id": 1,
                  "leaderboard_score": 1
                }
              }
            ],
            "purpose": "Tính tổng điểm cho leaderboard dựa trên practice và writing results",
            "data_input_from_node": [
              "collection_user_practice_results",
              "collection_user_writing"
            ],
            "data_output_to_node": ["collection_leaderboard"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "reset_time": { "$lte": "$$NOW" }
                }
              },
              {
                "$set": {
                  "rank": null,
                  "last_rank": "$rank",
                  "current_streak": 0,
                  "longest_streak": {
                    "$max": ["$current_streak", "$longest_streak"]
                  },
                  "last_reset_time": "$$NOW"
                }
              },

              {
                "$lookup": {
                  "from": "collection_user_practice_results",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "practice_results"
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_writing",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "writing_results"
                }
              },
              {
                "$addFields": {
                  "total_practice_score": {
                    "$sum": "$practice_results.total_score"
                  },
                  "total_writing_score": {
                    "$max": "$writing_results.total_score"
                  }
                }
              },
              {
                "$addFields": {
                  "leaderboard_score": {
                    "$add": [
                      { "$multiply": [0.7, "$total_practice_score"] },
                      { "$multiply": [0.3, "$total_writing_score"] }
                    ]
                  }
                }
              },

              {
                "$sort": {
                  "leaderboard_score": -1
                }
              },
              {
                "$group": {
                  "_id": "$leaderboard_score",
                  "users": {
                    "$push": {
                      "user_id": "$user_id",
                      "score": "$leaderboard_score"
                    }
                  }
                }
              },
              {
                "$sort": {
                  "_id": -1
                }
              },
              {
                "$group": {
                  "_id": null,
                  "all_users": {
                    "$push": {
                      "score_group": "$_id",
                      "users": "$users"
                    }
                  }
                }
              },
              {
                "$unwind": {
                  "path": "$all_users",
                  "includeArrayIndex": "rank_index"
                }
              },
              {
                "$unwind": "$all_users.users"
              },
              {
                "$addFields": {
                  "rank": {
                    "$add": [
                      {
                        "$multiply": [
                          "$rank_index",
                          { "$size": "$all_users.users" }
                        ]
                      },
                      {
                        "$indexOfArray": [
                          "$all_users.users.user_id",
                          "$all_users.users.user_id"
                        ]
                      }
                    ]
                  }
                }
              },

              {
                "$set": {
                  "current_streak": {
                    "$cond": {
                      "if": { "$eq": ["$rank", "$last_rank"] },
                      "then": { "$add": ["$current_streak", 1] },
                      "else": 1
                    }
                  },
                  "longest_streak": {
                    "$max": ["$current_streak", "$longest_streak"]
                  },
                  "top10_history": {
                    "$cond": {
                      "if": { "$lte": ["$rank", 10] },
                      "then": {
                        "entered_top10_at": {
                          "$ifNull": [
                            "$top10_history.entered_top10_at",
                            "$$NOW"
                          ]
                        },
                        "time_in_top10": {
                          "$cond": {
                            "if": {
                              "$ifNull": [
                                "$top10_history.entered_top10_at",
                                false
                              ]
                            },
                            "then": {
                              "$divide": [
                                {
                                  "$subtract": [
                                    "$$NOW",
                                    "$top10_history.entered_top10_at"
                                  ]
                                },
                                86400000
                              ]
                            },
                            "else": 0
                          }
                        }
                      },
                      "else": {
                        "entered_top10_at": null,
                        "time_in_top10": 0
                      }
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_leaderboard",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tự động tính toán và cập nhật leaderboard vào sáng thứ Hai lúc 2:00 AM",
            "data_input_from_node": [
              "collection_user_practice_results",
              "collection_user_writing",
              "collection_leaderboard"
            ],
            "data_output_to_node": ["collection_leaderboard"]
          },
          {
            "pipeline": [
              {
                "$sort": {
                  "leaderboard_score": -1
                }
              },
              {
                "$group": {
                  "_id": null,
                  "users": {
                    "$push": {
                      "user_id": "$user_id",
                      "score": "$leaderboard_score"
                    }
                  }
                }
              },
              {
                "$unwind": {
                  "path": "$users",
                  "includeArrayIndex": "rank"
                }
              },
              {
                "$merge": {
                  "into": "collection_leaderboard",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },
              {
                "$addFields": {
                  "current_streak": {
                    "$cond": {
                      "if": { "$eq": ["$rank", "$last_rank"] },
                      "then": { "$add": ["$current_streak", 1] },
                      "else": 1
                    }
                  },
                  "longest_streak": {
                    "$max": ["$current_streak", "$longest_streak"]
                  },
                  "last_rank": "$rank"
                }
              },
              {
                "pipeline": [
                  {
                    "$sort": {
                      "leaderboard_score": -1
                    }
                  },
                  {
                    "$group": {
                      "_id": "$leaderboard_score",
                      "users": {
                        "$push": {
                          "user_id": "$user_id",
                          "score": "$leaderboard_score"
                        }
                      }
                    }
                  },
                  {
                    "$sort": {
                      "_id": -1
                    }
                  },
                  {
                    "$group": {
                      "_id": null,
                      "all_users": {
                        "$push": {
                          "score_group": "$_id",
                          "users": "$users"
                        }
                      }
                    }
                  },
                  {
                    "$unwind": {
                      "path": "$all_users",
                      "includeArrayIndex": "rank_index"
                    }
                  },
                  {
                    "$unwind": "$all_users.users"
                  },
                  {
                    "$addFields": {
                      "rank": {
                        "$add": [
                          {
                            "$multiply": [
                              "$rank_index",
                              { "$size": "$all_users.users" }
                            ]
                          },
                          {
                            "$indexOfArray": [
                              "$all_users.users.user_id",
                              "$all_users.users.user_id"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "$merge": {
                      "into": "collection_leaderboard",
                      "on": "user_id",
                      "whenMatched": "merge",
                      "whenNotMatched": "insert"
                    }
                  }
                ],
                "purpose": "Cập nhật rank và lịch sử trụ hạng của người dùng",
                "data_input_from_node": ["collection_leaderboard"],
                "data_output_to_node": []
              },
              {
                "$set": {
                  "top10_history": {
                    "$cond": {
                      "if": { "$lte": ["$rank", 10] },
                      "then": {
                        "entered_top10_at": {
                          "$ifNull": [
                            "$top10_history.entered_top10_at",
                            "$$NOW"
                          ]
                        },
                        "time_in_top10": {
                          "$cond": {
                            "if": {
                              "$ifNull": [
                                "$top10_history.entered_top10_at",
                                false
                              ]
                            },
                            "then": {
                              "$divide": [
                                {
                                  "$subtract": [
                                    "$$NOW",
                                    "$top10_history.entered_top10_at"
                                  ]
                                },
                                86400000
                              ]
                            },
                            "else": 0
                          }
                        }
                      },
                      "else": {
                        "entered_top10_at": null,
                        "time_in_top10": 0
                      }
                    }
                  }
                }
              }
            ],
            "purpose": "Cập nhật rank và lịch sử trụ hạng của người dùng",
            "data_input_from_node": ["collection_leaderboard"],
            "data_output_to_node": []
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_elite_partner",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "ElitePartnerData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the document in MongoDB."
            },
            "user_id": {
              "type": "string",
              "description": "The unique user identifier.",
              "unique": true
            },
            "is_elite_partner": {
              "type": "boolean",
              "description": "Indicates if the user is an Elite Partner."
            },
            "eligible_for_elite": {
              "type": "boolean",
              "description": "Indicates if the user meets the criteria to become an Elite Partner."
            },
            "elite_benefits": {
              "type": "object",
              "properties": {
                "exclusive_content": {
                  "type": "boolean",
                  "description": "Access to exclusive content."
                },
                "priority_support": {
                  "type": "boolean",
                  "description": "Priority customer support."
                },
                "discounts": {
                  "type": "boolean",
                  "description": "Special discounts for services."
                }
              },
              "required": [
                "exclusive_content",
                "priority_support",
                "discounts"
              ],
              "description": "Benefits granted to Elite Partners."
            },
            "top10_history": {
              "type": "object",
              "properties": {
                "entered_top10_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The timestamp when the user entered the top 10."
                },
                "time_in_top10": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The total time (in days) the user has spent in the top 10."
                }
              },
              "required": ["entered_top10_at", "time_in_top10"],
              "description": "History of the user's presence in the top 10."
            },
            "weeks_out_of_top10": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of consecutive weeks the user has been out of the top 10."
            },
            "status": {
              "type": "string",
              "enum": ["active", "inactive", "revoked"],
              "description": "Current status of the Elite Partner."
            },
            "revocation_reason": {
              "type": "string",
              "nullable": true,
              "description": "Reason for revoking Elite Partner status, if applicable."
            },
            "revocation_date": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The timestamp when the Elite Partner status was revoked."
            },
            "last_verification_date": {
              "type": "string",
              "format": "date-time",
              "description": "The last date the user's Elite Partner status was verified."
            }
          },
          "required": [
            "_id",
            "user_id",
            "is_elite_partner",
            "eligible_for_elite",
            "elite_benefits",
            "top10_history",
            "status"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "ELITE_001",
            "user_id": "81f204d0-5ef7-4dd0-adfe-69f8f83860db",
            "is_elite_partner": true,
            "eligible_for_elite": true,
            "elite_benefits": {
              "exclusive_content": true,
              "priority_support": true,
              "discounts": true
            },
            "top10_history": {
              "entered_top10_at": "2025-02-14T18:26:02.588Z",
              "time_in_top10": 7
            },
            "weeks_out_of_top10": 0,
            "status": "active",
            "revocation_reason": null,
            "revocation_date": null,
            "last_verification_date": "2025-02-14T18:26:02.588Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "card_id": { "$exists": true, "$type": "string" },
                  "user_id": { "$exists": true, "$type": "string" }
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_login",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_login_data"
                }
              },
              {
                "$unwind": "$user_login_data"
              },
              {
                "$match": {
                  "user_login_data.token_login.expires_at": { "$gt": "$$NOW" }
                }
              }
            ],
            "purpose": "kiểm tra xem người dùng có thẻ hay không",
            "data_input_from_node": ["collection_user_login"],

            "data_output_to_node": ["collection_elite_partner"]
          },
          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "collection_leaderboard",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "collection_leaderboard"
                }
              },
              {
                "$match": {
                  "$expr": {
                    "$anyElementTrue": {
                      "$map": {
                        "input": "$collection_leaderboard",
                        "as": "entry",
                        "in": {
                          "$lt": ["$$entry.rank", 10]
                        }
                      }
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "entered_top10_date": {
                    "$cond": [
                      {
                        "$eq": [
                          {
                            "$type": "$top10_history.entered_top10_at"
                          },
                          "date"
                        ]
                      },
                      "$top10_history.entered_top10_at",
                      {
                        "$dateFromString": {
                          "dateString": "$top10_history.entered_top10_at",
                          "format": "%Y-%m-%dT%H:%M:%S.%LZ"
                        }
                      }
                    ]
                  },
                  "current_rank": "$leaderboard_data.rank"
                }
              },
              {
                "$addFields": {
                  "time_in_top10_ms": {
                    "$cond": [
                      "$entered_top10_at",
                      {
                        "$subtract": ["$$NOW", "$entered_top10_at"]
                      },
                      0
                    ]
                  },
                  "time_in_top10_days": {
                    "$cond": [
                      "$entered_top10_at",
                      {
                        "$divide": [
                          {
                            "$subtract": ["$$NOW", "$entered_top10_at"]
                          },
                          86400000
                        ]
                      },
                      0
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "left_top10_since": {
                    "$cond": [
                      {
                        "$gt": ["$current_rank", 10]
                      },
                      "$$NOW",
                      null
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "weeks_in_of_top10": {
                    "$cond": [
                      {
                        "$lt": ["$current_rank", 10]
                      },
                      {
                        "$floor": {
                          "$divide": [
                            {
                              "$subtract": ["$$NOW", "$left_top10_since"]
                            },
                            604800000
                          ]
                        }
                      },
                      0
                    ]
                  }
                }
              },
              {
                "$set": {
                  "status": "active",
                  "became_elite_date": "$$NOW"
                }
              },
              {
                "$match": {
                  "$expr": {
                    "$and": [
                      {
                        "$ne": ["$user_id", null]
                      },
                      {
                        "$ne": ["$current_streak", null]
                      },
                      {
                        "$ne": ["$last_rank", null]
                      },
                      {
                        "$ne": ["$last_reset_time", null]
                      },
                      {
                        "$ne": ["$leaderboard_score", null]
                      },
                      {
                        "$ne": ["$longest_streak", null]
                      },
                      {
                        "$ne": ["$rank", null]
                      },
                      {
                        "$ne": ["$score", null]
                      },
                      {
                        "$ne": ["$top10_history.entered_top10_at", null]
                      }
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "elite_benefits": {
                    "exclusive_content": true,
                    "priority_support": true,
                    "discounts": true
                  },
                  "is_elite_partner": true,
                  "eligible_for_elite": true,
                  "status": "active",
                  "revocation_reason": null,
                  "revocation_date": null,
                  "last_verification_date": "$$NOW"
                }
              },
              {
                "$merge": {
                  "into": "collection_elite_partner",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Xét điều kiện để trở thành Elite Partner",
            "data_input_from_node": ["collection_leaderboard"],
            "data_output_to_node": ["elite_partners"]
          },

          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "let": {},
                  "pipeline": [
                    {
                      "$group": {
                        "_id": null,
                        "all_signatures": { "$push": "$signature" }
                      }
                    }
                  ],
                  "as": "all_card_signatures"
                }
              },
              {
                "$unwind": "$all_card_signatures"
              },
              {
                "$addFields": {
                  "elite_benefits": {
                    "exclusive_content": true,
                    "priority_support": true,
                    "discounts": true
                  }
                }
              },
              {
                "$merge": {
                  "into": "elite_partners",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tạo quyền lợi và xác thực chữ ký số để trở thành Elite Partner",
            "data_input_from_node": ["collection_cards"],
            "data_output_to_node": ["elite_partners"]
          },
          {
            "pipeline": [
              {
                "$merge": {
                  "into": "elite_partners",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Lưu thông tin Elite Partner vào cơ sở dữ liệu",
            "data_input_from_node": ["elite_partners"],
            "data_output_to_node": []
          },
          {
            "pipeline": [
              {
                "$lookup": {
                  "from": "collection_elite_partner",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "collection_elite_partner"
                }
              },
              {
                "$match": {
                  "collection_elite_partner.is_elite_partner": true
                }
              },
              {
                "$unwind": "$collection_elite_partner"
              },
              {
                "$addFields": {
                  "entered_top10_date": {
                    "$cond": [
                      {
                        "$eq": [
                          {
                            "$type": "$top10_history.entered_top10_at"
                          },
                          "date"
                        ]
                      },
                      "$top10_history.entered_top10_at",

                      {
                        "$dateFromString": {
                          "dateString": "$top10_history.entered_top10_at",
                          "format": "%Y-%m-%dT%H:%M:%S.%LZ"
                        }
                      }
                    ]
                  },
                  "current_rank": "$leaderboard_data.rank"
                }
              },
              {
                "$addFields": {
                  "time_in_top10_ms": {
                    "$cond": [
                      "$entered_top10_at",
                      {
                        "$subtract": ["$$NOW", "$entered_top10_at"]
                      },
                      0
                    ]
                  },
                  "time_in_top10_days": {
                    "$cond": [
                      "$entered_top10_at",
                      {
                        "$divide": [
                          {
                            "$subtract": ["$$NOW", "$entered_top10_at"]
                          },
                          86400000
                        ]
                      },
                      0
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "left_top10_since": {
                    "$cond": [
                      {
                        "$gt": ["$current_rank", 10]
                      },
                      "$$NOW",
                      null
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "weeks_out_of_top10": {
                    "$cond": [
                      {
                        "$gt": ["$current_rank", 10]
                      },
                      {
                        "$floor": {
                          "$divide": [
                            {
                              "$subtract": ["$$NOW", "$left_top10_since"]
                            },
                            604800000
                          ]
                        }
                      },
                      0
                    ]
                  }
                }
              },
              {
                "$match": {
                  "rank": {
                    "$gt": 10
                  }
                }
              },
              {
                "$set": {
                  "status": "revoked",
                  "revocation_reason": "Fell out of top 10 for 3 consecutive weeks.",
                  "revocation_date": "$$NOW"
                }
              },
              {
                "$merge": {
                  "into": "elite_partners",
                  "on": "user_id",
                  "whenMatched": "replace",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Hủy tư cách Elite Partner nếu không trụ hạng trong top 10 trong 3 tuần liên tiếp",
            "data_input_from_node": ["elite_partners"],
            "data_output_to_node": []
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "matching_elite_learner",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "MatchingLogData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "elite_id": {
              "type": "string",
              "description": "ID của Elite Partner."
            },
            "learner_id": {
              "type": "string",
              "description": "ID của Learner."
            },
            "matched_at": {
              "type": "string",
              "format": "date-time",
              "description": "Thời điểm ghép cặp."
            },
            "end_at": {
              "type": "string",
              "format": "date-time",
              "description": "Thời điểm kết thúc mối quan hệ matching."
            },
            "status": {
              "type": "string",
              "enum": ["pending", "active", "terminated"],
              "description": "Trạng thái của mối quan hệ matching."
            },
            "log": {
              "type": "object",
              "properties": {
                "elite_rank": {
                  "type": "integer",
                  "description": "Thứ hạng của Elite Partner."
                },
                "learner_rank": {
                  "type": "integer",
                  "description": "Thứ hạng của Learner."
                }
              }
            },
            "wants_matching": {
              "type": "boolean",
              "description": "Learner có muốn tìm kiếm sự hỗ trợ từ Elite hay không."
            },
            "signature": {
              "type": "string",
              "description": "Chữ ký số của Learner nếu họ đồng ý matching."
            }
          },
          "required": [
            "_id",
            "elite_id",
            "learner_id",
            "matched_at",
            "end_at",
            "status",
            "log",
            "wants_matching"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "12345_67890_2025-01-01T00:00:00Z",
            "elite_id": "12345",
            "learner_id": "67890",
            "matched_at": "2025-01-01T00:00:00Z",
            "end_at": "2025-01-08T00:00:00Z",
            "status": "pending",
            "log": {
              "elite_rank": 1,
              "learner_rank": 10
            },
            "wants_matching": true,
            "signature": "signature_of_learner"
          },
          {
            "_id": "54321_09876_2025-01-02T00:00:00Z",
            "elite_id": "54321",
            "learner_id": "09876",
            "matched_at": "2025-01-02T00:00:00Z",
            "end_at": "2025-01-09T00:00:00Z",
            "status": "active",
            "log": {
              "elite_rank": 2,
              "learner_rank": 20
            },
            "wants_matching": true,
            "signature": "signature_of_learner"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": "USER_ID_FROM_CLIENT",
                  "wants_matching": true
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$lookup": {
                  "from": "collection_elite_partner",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "elite_partner_data"
                }
              },
              {
                "$addFields": {
                  "is_elite_partner": {
                    "$gt": [{ "$size": "$elite_partner_data" }, 0]
                  }
                }
              },
              {
                "$project": {
                  "user_id": 1,
                  "wants_matching": 1,
                  "elite_id": {
                    "$cond": {
                      "if": "$is_elite_partner",
                      "then": "$user_id",
                      "else": null
                    }
                  },
                  "learner_id": {
                    "$cond": {
                      "if": "$is_elite_partner",
                      "then": null,
                      "else": "$user_id"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "matching_elite_learner",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline để xác định Learner có muốn matching với Elite Partner hay không.",
            "data_input_from_node": [
              "collection_elite_partner",
              "collection_leaderboard"
            ],
            "data_output_to_node": "matching_elite_learner"
          },
          {
            "pipeline": [
              {
                "$match": {
                  "status": "pending",
                  "wants_matching": true
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "learner_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$addFields": {
                  "signature": "$card_data.signature",
                  "is_signature_valid": true
                }
              },
              {
                "$merge": {
                  "into": "matching_logs",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline xử lý matching dựa trên lựa chọn của Learner.",
            "data_input_from_node": [
              "matching_elite_learner",
              "collection_cards"
            ],
            "data_output_to_node": "matching_logs"
          },
          {
            "pipeline": [
              {
                "$match": {
                  "is_elite_partner": true,
                  "status": "active"
                }
              },

              {
                "$lookup": {
                  "from": "collection_leaderboard",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "leaderboard_data"
                }
              },
              {
                "$unwind": "$leaderboard_data"
              },
              {
                "$addFields": {
                  "elite_rank": "$leaderboard_data.rank"
                }
              },

              {
                "$lookup": {
                  "from": "collection_leaderboard",
                  "let": { "current_user_id": "$user_id" },
                  "pipeline": [
                    {
                      "$match": {
                        "$expr": {
                          "$and": [
                            { "$ne": ["$user_id", "$$current_user_id"] },
                            {
                              "$or": [
                                { "$gt": ["$rank", 20] },
                                { "$eq": ["$rank", null] }
                              ]
                            },
                            { "$eq": ["$wants_matching", true] }
                          ]
                        }
                      }
                    }
                  ],
                  "as": "eligible_learners"
                }
              },
              {
                "$unwind": "$eligible_learners"
              },

              {
                "$lookup": {
                  "from": "matching_logs",
                  "localField": "user_id",
                  "foreignField": "elite_id",
                  "as": "existing_matches"
                }
              },
              {
                "$addFields": {
                  "current_match_count": { "$size": "$existing_matches" }
                }
              },
              {
                "$match": {
                  "current_match_count": { "$lt": 3 }
                }
              },

              {
                "$lookup": {
                  "from": "matching_logs",
                  "localField": "eligible_learners.user_id",
                  "foreignField": "learner_id",
                  "as": "learner_existing_matches"
                }
              },
              {
                "$addFields": {
                  "learner_existing_match_count": {
                    "$size": "$learner_existing_matches"
                  }
                }
              },
              {
                "$match": {
                  "learner_existing_match_count": 0
                }
              },

              {
                "$addFields": {
                  "learner_id": "$eligible_learners.user_id",
                  "learner_rank": "$eligible_learners.rank",
                  "matched_at": "$$NOW",
                  "end_at": {
                    "$dateAdd": {
                      "startDate": "$$NOW",
                      "unit": "week",
                      "amount": 1
                    }
                  },
                  "status": "pending",
                  "wants_matching": true
                }
              },

              {
                "$project": {
                  "_id": {
                    "$concat": [
                      "$user_id",
                      "_",
                      "$eligible_learners.user_id",
                      "_",
                      { "$toString": "$$NOW" }
                    ]
                  },
                  "elite_id": "$user_id",
                  "learner_id": 1,
                  "matched_at": 1,
                  "end_at": 1,
                  "status": 1,
                  "log": {
                    "elite_rank": "$elite_rank",
                    "learner_rank": "$learner_rank"
                  },
                  "wants_matching": 1,
                  "signature": "$eligible_learners.user_id"
                }
              },

              {
                "$merge": {
                  "into": "matching_logs",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for automatically matching Elite Partners with Learners based on rank and status.",
            "data_input_from_node": [
              "elite_partners",
              "leaderboard",
              "matching_logs"
            ],
            "data_output_to_node": "matching_logs"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "supporting_feedback",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "SupportingFeedbackData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The unique identifier of the document in MongoDB."
            },
            "matching_id": {
              "type": "string",
              "description": "ID của mối quan hệ matching (tham chiếu đến collection matching_logs)."
            },
            "elite_id": {
              "type": "string",
              "description": "ID của Elite Partner."
            },
            "learner_id": {
              "type": "string",
              "description": "ID của Learner."
            },
            "practice_results": {
              "type": "object",
              "properties": {
                "listening_score": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "Điểm kỹ năng nghe."
                },
                "reading_score": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "Điểm kỹ năng đọc."
                },
                "writing_score": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "Điểm kỹ năng viết."
                },
                "speaking_score": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "Điểm kỹ năng nói."
                }
              },
              "description": "Kết quả luyện tập của Learner từ collection_user_practice_results."
            },
            "completed_materials": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "material_id": {
                    "type": "string",
                    "description": "ID của đề ôn tập đã hoàn thành."
                  },
                  "section": {
                    "type": "string",
                    "enum": ["listening", "reading", "writing", "speaking"],
                    "description": "Kỹ năng thi đã hoàn thành."
                  },
                  "part": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 4,
                    "description": "Phần thi đã hoàn thành."
                  },
                  "score": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Điểm số của phần thi."
                  }
                },
                "required": ["material_id", "section", "part", "score"]
              },
              "description": "Danh sách các đề ôn tập đã hoàn thành bởi Learner từ collection_materials_user_done."
            },
            "feedback": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Các nhận xét của Elite Partner về kết quả của Learner."
                },
                "suggestions": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Các gợi ý cải thiện từ Elite Partner."
                }
              },
              "required": ["comments", "suggestions"]
            },
            "learner_reactions": [
              {
                "reaction_type": {
                  "type": "string",
                  "enum": ["like", "dislike", "neutral"]
                },
                "comment": "string",
                "created_at": "date-time"
              }
            ],
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Thời điểm tạo feedback."
            }
          },
          "required": [
            "_id",
            "matching_id",
            "elite_id",
            "learner_id",
            "practice_results",
            "completed_materials",
            "feedback",
            "created_at"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "60c72b2f9b1e8c001c8e4d3a",
            "matching_id": "60c72b2f9b1e8c001c8e4d39",
            "elite_id": "60c72b2f9b1e8c001c8e4d38",
            "learner_id": "60c72b2f9b1e8c001c8e4d37",
            "practice_results": {
              "listening_score": 85,
              "reading_score": 90,
              "writing_score": 80,
              "speaking_score": 75
            },
            "completed_materials": [
              {
                "material_id": "60c72b2f9b1e8c001c8e4d36",
                "section": "listening",
                "part": 1,
                "score": 85
              },
              {
                "material_id": "60c72b2f9b1e8c001c8e4d35",
                "section": "reading",
                "part": 2,
                "score": 90
              }
            ],
            "feedback": {
              "comments": [
                "Great progress in listening skills.",
                "Reading comprehension is excellent."
              ],
              "suggestions": [
                "Focus on writing practice.",
                "Improve speaking fluency."
              ]
            },
            "learner_reactions": [],
            "created_at": "2025-01-01T12:00:00Z"
          },
          {
            "_id": "60c72b2f9b1e8c001c8e4d3b",
            "matching_id": "60c72b2f9b1e8c001c8e4d3a",
            "elite_id": "60c72b2f9b1e8c001c8e4d39",
            "learner_id": "60c72b2f9b1e8c001c8e4d38",
            "practice_results": {
              "listening_score": 78,
              "reading_score": 82,
              "writing_score": 88,
              "speaking_score": 80
            },
            "completed_materials": [
              {
                "material_id": "60c72b2f9b1e8c001c8e4d34",
                "section": "writing",
                "part": 3,
                "score": 88
              }
            ],
            "feedback": {
              "comments": [
                "Writing skills have improved significantly.",
                "Speaking needs more practice."
              ],
              "suggestions": [
                "Continue with writing exercises.",
                "Engage in more speaking activities."
              ]
            },
            "learner_reactions": ["like"],
            "created_at": "2025-01-02T12:00:00Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "status": "active"
                }
              },
              {
                "$lookup": {
                  "from": "collection_user_practice_results",
                  "localField": "learner_id",
                  "foreignField": "user_id",
                  "as": "practice_results"
                }
              },
              {
                "$unwind": "$practice_results"
              },
              {
                "$lookup": {
                  "from": "collection_materials_user_done",
                  "localField": "learner_id",
                  "foreignField": "user_id",
                  "as": "completed_materials"
                }
              },
              {
                "$addFields": {
                  "practice_results": {
                    "listening_score": "$practice_results.skill_scores.listening.total",
                    "reading_score": "$practice_results.skill_scores.reading.total",
                    "writing_score": "$practice_results.skill_scores.writing.total",
                    "speaking_score": "$practice_results.skill_scores.speaking.total"
                  },
                  "completed_materials": {
                    "$map": {
                      "input": "$completed_materials",
                      "as": "material",
                      "in": {
                        "material_id": "$$material.material_id",
                        "section": "$$material.section",
                        "part": "$$material.part",
                        "score": "$$material.score"
                      }
                    }
                  }
                }
              },
              {
                "$project": {
                  "_id": 0,
                  "matching_id": "$_id",
                  "elite_id": "$elite_id",
                  "learner_id": "$learner_id",
                  "practice_results": 1,
                  "completed_materials": 1,
                  "feedback": {
                    "comments": [],
                    "suggestions": []
                  },
                  "created_at": "$$NOW"
                }
              },
              {
                "$merge": {
                  "into": "supporting_feedback",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for creating supporting feedback based on practice results and completed materials.",
            "data_input_from_node": [
              "matching_logs",
              "collection_user_practice_results",
              "collection_materials_user_done"
            ],
            "data_output_to_node": "supporting_feedback"
          },
          {
            "pipeline": [
              {
                "$match": {
                  "_id": "feedback_001"
                }
              },
              {
                "$addFields": {
                  "learner_reactions": {
                    "$concatArrays": [
                      "$learner_reactions",
                      [
                        {
                          "reaction_type": "$input.reaction_type",
                          "comment": "$input.comment",
                          "created_at": "$$NOW"
                        }
                      ]
                    ]
                  }
                }
              },
              {
                "$merge": {
                  "into": "supporting_feedback",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for adding learner reactions to existing feedback.",
            "data_input_from_node": ["supporting_feedback"],
            "data_output_to_node": "supporting_feedback"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_recharge_codes",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "RechargeCodeData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "ID duy nhất của mã nạp tiền."
            },
            "code": {
              "type": "string",
              "unique": true,
              "description": "Mã nạp tiền duy nhất (tự động tạo)."
            },
            "amount": {
              "type": "integer",
              "enum": [10000, 20000, 50000, 100000, 200000, 500000],
              "description": "Giá trị tiền được nạp khi sử dụng mã này (đơn vị VND)."
            },
            "status": {
              "type": "string",
              "enum": ["active", "used"],
              "description": "Trạng thái của mã nạp tiền."
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian tạo mã nạp tiền."
            },
            "used_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "Thời điểm mã nạp tiền được sử dụng."
            }
          },
          "required": ["_id", "code", "amount", "status", "created_at"],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "CODE001",
            "code": "A1B2C3",
            "amount": 10000,
            "status": "active",
            "created_at": "2025-02-14T18:26:02.588Z",
            "used_at": null
          },
          {
            "_id": "CODE002",
            "code": "D4E5F6",
            "amount": 20000,
            "status": "active",
            "created_at": "2025-02-14T18:27:15.345Z",
            "used_at": null
          },
          {
            "_id": "CODE003",
            "code": "G7H8I9",
            "amount": 50000,
            "status": "active",
            "created_at": "2025-02-14T18:28:45.789Z",
            "used_at": null
          },
          {
            "_id": "CODE004",
            "code": "J1K2L3",
            "amount": 100000,
            "status": "active",
            "created_at": "2025-02-14T18:30:12.234Z",
            "used_at": null
          },
          {
            "_id": "CODE005",
            "code": "M4N5O6",
            "amount": 200000,
            "status": "active",
            "created_at": "2025-02-14T18:31:56.678Z",
            "used_at": null
          },
          {
            "_id": "CODE006",
            "code": "P7Q8R9",
            "amount": 500000,
            "status": "active",
            "created_at": "2025-02-14T18:33:22.123Z",
            "used_at": null
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$addFields": {
                  "code": {
                    "$function": {
                      "body": "function() { const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; let result = ''; for (let i = 0; i < 6; i++) { result += characters.charAt(Math.floor(Math.random() * characters.length)); } return result; }",
                      "args": [],
                      "lang": "js"
                    }
                  },
                  "status": "active",
                  "created_at": "$$NOW"
                }
              },
              {
                "$merge": {
                  "into": "collection_recharge_codes",
                  "on": "code",
                  "whenMatched": "fail",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tạo mã nạp tiền mới và thêm vào collection_recharge_codes.",
            "data_input_from_node": [],
            "data_output_to_node": ["collection_recharge_codes"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "code": { "$exists": true },
                  "status": "active"
                }
              },
              {
                "$addFields": {
                  "status": "used",
                  "used_at": "$$NOW",
                  "user_id_used": "$user_id"
                }
              },
              {
                "$project": {
                  "_id": 1,
                  "code": 1,
                  "user_id": 1,
                  "amount": 1,
                  "status": 1,
                  "used_at": 1,
                  "user_id_used": 1
                }
              },
              {
                "$merge": {
                  "into": "collection_recharge_codes",
                  "on": "_id",
                  "whenMatched": "replace",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Xử lý mã nạp tiền.",
            "data_input_from_node": [
              "collection_recharge_codes",
              "collection_cards"
            ],
            "data_output_to_node": [
              "collection_cards",
              "collection_recharge_codes_archive"
            ]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "code": { "$exists": true },
                  "status": "used"
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id_used",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": {
                  "path": "$card_data",
                  "preserveNullAndEmptyArrays": false
                }
              },
              {
                "$project": {
                  "_id": "$card_data._id",
                  "__v": "$card_data.__v",
                  "card_id": "$card_data.card_id",
                  "created_at": "$card_data.created_at",
                  "createdAt": "$card_data.createdAt",
                  "device_id": "$card_data.device_id",
                  "hashed_studentID": "$card_data.hashed_studentID",
                  "public_key": "$card_data.public_key",
                  "qr_code": "$card_data.qr_code",
                  "signature": "$card_data.signature",
                  "status": "$card_data.status",
                  "token": "$card_data.token",
                  "user_id": "$card_data.user_id",
                  "balance": "$updated_balance",
                  "updatedAt": "$$NOW"
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },
              {
                "$merge": {
                  "into": "collection_recharge_codes_archive",
                  "on": "_id",
                  "whenMatched": "replace",
                  "whenNotMatched": "insert"
                }
              }
            ],

            "purpose": "cập nhật số dư và xóa mã đã sử dụng.",
            "data_input_from_node": [
              "collection_recharge_codes",
              "collection_cards"
            ],
            "data_output_to_node": [
              "collection_cards",
              "collection_recharge_codes_archive"
            ]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_user_transactions",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "UserTransactionData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "ID duy nhất của giao dịch."
            },
            "user_id": {
              "type": "string",
              "unique": true,
              "description": "ID người dùng thực hiện giao dịch."
            },
            "transaction_type": {
              "type": "string",
              "enum": ["deposit", "payment", "reward"],
              "description": "Loại giao dịch: nạp tiền, thanh toán, hoặc thưởng."
            },
            "amount": {
              "type": "integer",
              "minimum": 10000,
              "maximum": 1000000,
              "description": "Số tiền liên quan đến giao dịch (đơn vị VND)."
            },
            "description": {
              "type": "string",
              "description": "Mô tả chi tiết về giao dịch."
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian giao dịch được tạo."
            },
            "card_id": {
              "type": "string",
              "unique": true,
              "description": "ID thẻ xác minh người dùng."
            },
            "signature": {
              "type": "string",
              "description": "Chữ ký số được tạo bởi ví của người dùng."
            },
            "public_key": {
              "type": "string",
              "description": "Khóa công khai để xác thực chữ ký số."
            },
            "status": {
              "type": "string",
              "enum": ["pending", "completed", "failed", "refunded"],
              "description": "Trạng thái của giao dịch."
            }
          },
          "required": [
            "_id",
            "user_id",
            "transaction_type",
            "amount",
            "description",
            "created_at",
            "status"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "txn_001",
            "user_id": "user_123",
            "transaction_type": "deposit",
            "amount": 100000,
            "description": "Nạp tiền vào ví.",
            "created_at": "2025-02-14T18:26:02.588Z",
            "card_id": "card_456",
            "signature": "signature_789",
            "public_key": "public_key_abc",
            "status": "completed"
          },
          {
            "_id": "txn_002",
            "user_id": "user_456",
            "transaction_type": "payment",
            "amount": 50000,
            "description": "Thanh toán phí dịch vụ.",
            "created_at": "2025-02-14T18:27:15.345Z",
            "card_id": "card_789",
            "signature": "signature_def",
            "public_key": "public_key_xyz",
            "status": "pending"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "card_id": { "$exists": true }
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "card_id",
                  "foreignField": "card_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$addFields": {
                  "is_balance_sufficient": {
                    "$gte": ["$card_data.balance", "$amount"]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Kiểm tra số dư trong collection_cards.balance trước khi thanh toán.",
            "data_input_from_node": ["collection_user_transactions"],
            "data_output_to_node": ["collection_user_transactions"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_OTP": { "$exists": true },
                  "user_id": { "$exists": true },
                  "transaction_type": "payment",
                  "status": "pending"
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$addFields": {
                  "is_OTP_valid": {
                    "$eq": ["$user_OTP", "$card_data.user_OTP"]
                  },
                  "created_at": "$$NOW",
                  "expiration_time": {
                    "$dateAdd": {
                      "startDate": "$$NOW",
                      "unit": "second",
                      "amount": 60
                    }
                  }
                }
              },
              {
                "$match": {
                  "is_OTP_valid": true,
                  "status": "pending",
                  "expiration_time": { "$gte": "$$NOW" }
                }
              },
              {
                "$set": {
                  "signature": "$card_data.signature"
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },
              {
                "$addFields": {
                  "is_signature_valid": {
                    "$cond": {
                      "if": { "$eq": ["$signature", "CLIENT_SIGNATURE"] },
                      "then": true,
                      "else": false
                    }
                  }
                }
              },
              {
                "$set": {
                  "status": {
                    "$cond": {
                      "if": {
                        "$and": [
                          "$is_signature_valid",
                          { "$lte": ["$$NOW", "$expiration_time"] }
                        ]
                      },
                      "then": "completed",
                      "else": "failed"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "fail"
                }
              }
            ],
            "purpose": "Xác thực OTP và chữ ký số của người dùng trước khi hoàn tất giao dịch.",
            "data_input_from_node": ["collection_cards"],
            "data_output_to_node": ["collection_user_transactions"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "transaction_type": "payment",
                  "amount": 10000,
                  "status": "pending",
                  "steps.status": "pending"
                }
              },
              {
                "$unwind": "$steps"
              },
              {
                "$match": {
                  "steps.status": "pending"
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "card_id",
                  "foreignField": "card_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$set": {
                  "is_balance_sufficient": {
                    "$gte": [
                      "$card_data.balance",
                      { "$divide": ["$amount", 5] }
                    ]
                  }
                }
              },
              {
                "$match": {
                  "is_balance_sufficient": true
                }
              },
              {
                "$set": {
                  "card_data.balance": {
                    "$subtract": [
                      "$card_data.balance",
                      { "$divide": ["$amount", 5] }
                    ]
                  },
                  "steps.$[step].status": "completed",
                  "steps.$[step].verified_at": "$$NOW"
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "user_materials"
                }
              },
              {
                "$unwind": "$user_materials"
              },
              {
                "$set": {
                  "user_materials.remaining_attempts": {
                    "$add": ["$user_materials.remaining_attempts", 1]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "card_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Xử lý từng bước trong chuỗi giao dịch blockchain-style, trừ tiền từ collection_cards.balance và tăng remaining_attempts.",
            "data_input_from_node": ["collection_user_transactions"],
            "data_output_to_node": [
              "collection_cards",
              "collection_user_transactions"
            ]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "_id": "TRANSACTION_ID",
                  "status": "pending"
                }
              },
              {
                "$addFields": {
                  "is_signature_valid": {
                    "$eq": ["$signature", "CLIENT_SIGNATURE"]
                  },
                  "is_within_time_limit": {
                    "$lte": ["$$NOW", "$expiration_time"]
                  }
                }
              },
              {
                "$set": {
                  "status": {
                    "$cond": {
                      "if": {
                        "$and": ["$is_signature_valid", "$is_within_time_limit"]
                      },
                      "then": "completed",
                      "else": "failed"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "fail"
                }
              }
            ],
            "purpose": "Xác thực chữ ký số và thời gian giao dịch.",
            "data_input_from_node": ["collection_user_transactions"],
            "data_output_to_node": [
              "collection_cards",
              "collection_user_transactions"
            ]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "remaining_attempts": { "$gt": 0 }
                }
              },
              {
                "$set": {
                  "remaining_attempts": 2
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "user_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Reset remaining_attempts về 2 nếu người dùng không sử dụng hết.",
            "data_input_from_node": ["collection_cards"],
            "data_output_to_node": ["collection_cards"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "steps.status": "pending"
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "card_id",
                  "foreignField": "card_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$set": {
                  "card_data.balance": {
                    "$add": [
                      "$card_data.balance",
                      {
                        "$multiply": [
                          { "$size": "$steps" },
                          { "$divide": ["$amount", 5] }
                        ]
                      }
                    ]
                  },
                  "steps.$[].status": "refunded"
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "card_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Hoàn tiền cho người dùng nếu block không hoàn thành.",
            "data_input_from_node": ["collection_user_transactions"],
            "data_output_to_node": [
              "collection_cards",
              "collection_user_transactions"
            ]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "user_id": { "$exists": true },
                  "transaction_type": "payment",
                  "status": "failed"
                }
              },

              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "card_id",
                  "foreignField": "_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$set": {
                  "card_data.balance": {
                    "$add": ["$card_data.balance", "$amount"]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "fail"
                }
              },
              {
                "$set": {
                  "status": "refunded"
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "fail"
                }
              }
            ],
            "purpose": "Hoàn tiền cho người dùng nếu giao dịch thanh toán thất bại.",
            "data_input_from_node": ["collection_user_transactions"],
            "data_output_to_node": [
              "collection_cards",
              "collection_user_transactions"
            ]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "web_product_cost",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "WebProductCost",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "date": {
              "type": "string",
              "format": "date",
              "description": "Thời gian ghi nhận chi phí, theo định dạng YYYY-MM"
            },
            "currency": {
              "type": "string",
              "description": "Đơn vị tiền tệ (VND, VND, v.v.)"
            },
            "total_monthly_cost": {
              "type": "number",
              "description": "Tổng chi phí theo tháng"
            },
            "notes": {
              "type": "string",
              "description": "Ghi chú thêm liên quan đến chi phí"
            },
            "items": {
              "type": "array",
              "description": "Danh sách các khoản chi tiết",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Tên khoản chi" },
                  "type": {
                    "type": "string",
                    "enum": ["infrastructure", "third_party", "tool"],
                    "description": "Loại khoản chi theo nhóm"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "server",
                      "hosting",
                      "domain",
                      "email",
                      "database",
                      "development",
                      "analytics",
                      "other"
                    ],
                    "description": "Phân loại chi phí chi tiết"
                  },
                  "description": {
                    "type": "string",
                    "description": "Mô tả khoản chi"
                  },
                  "amount": { "type": "number", "description": "Số tiền" },
                  "currency": {
                    "type": "string",
                    "description": "Đơn vị tiền tệ"
                  },
                  "is_paid": {
                    "type": "boolean",
                    "description": "Đã thanh toán hay chưa"
                  },
                  "provider": {
                    "type": "string",
                    "description": "Nhà cung cấp dịch vụ"
                  },
                  "billing_cycle": {
                    "type": "string",
                    "enum": ["monthly", "yearly", "one-time", "free"],
                    "description": "Chu kỳ thanh toán"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "category",
                  "description",
                  "amount",
                  "currency",
                  "is_paid",
                  "provider",
                  "billing_cycle"
                ]
              }
            }
          },
          "required": [
            "_id",
            "date",
            "currency",
            "total_monthly_cost",
            "items"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "cost_2025_06",
            "date": "2025-06",
            "currency": "VND",
            "total_monthly_cost": 0,
            "notes": "Hiện tại đang dùng gói miễn phí nhiều dịch vụ, dự kiến sẽ phát sinh chi phí khi scale.",
            "items": [
              {
                "name": "Server Backend - Render",
                "type": "infrastructure",
                "category": "server",
                "description": "Chi phí cho instance backend chạy trên Render",
                "amount": 0,
                "currency": "VND",
                "is_paid": false,
                "provider": "Render",
                "billing_cycle": "monthly"
              },
              {
                "name": "Hosting Frontend - Netlify",
                "type": "infrastructure",
                "category": "hosting",
                "description": "Chi phí hosting frontend trên Netlify",
                "amount": 0,
                "currency": "VND",
                "is_paid": false,
                "provider": "Netlify",
                "billing_cycle": "monthly"
              },

              {
                "name": "CI/CD Pipeline",
                "type": "tool",
                "category": "development",
                "description": "Chi phí cho CI/CD trên GitHub Actions",
                "amount": 0,
                "currency": "VND",
                "is_paid": false,
                "provider": "GitHub",
                "billing_cycle": "monthly"
              },
              {
                "name": "Analytics Tools",
                "type": "tool",
                "category": "analytics",
                "description": "Sử dụng Google Analytics / Mixpanel",
                "amount": 0,
                "currency": "VND",
                "is_paid": false,
                "provider": "Google",
                "billing_cycle": "free"
              }
            ]
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$setWindowFields": {
                  "partitionBy": null,
                  "sortBy": "_id",
                  "output": {
                    "current_date": {
                      "$documentNumber": {}
                    }
                  }
                }
              },
              {
                "$unwind": {
                  "path": "$items"
                }
              },
              {
                "$addFields": {
                  "items.monthly_amount": {
                    "$cond": [
                      { "$eq": ["$items.billing_cycle", "monthly"] },
                      "$items.amount",
                      {
                        "$cond": [
                          { "$eq": ["$items.billing_cycle", "yearly"] },
                          { "$divide": ["$items.amount", 12] },
                          {
                            "$cond": [
                              { "$eq": ["$items.billing_cycle", "one-time"] },
                              0,
                              {
                                "$cond": [
                                  { "$eq": ["$items.billing_cycle", "free"] },
                                  0,
                                  0
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "$group": {
                  "_id": "$_id",
                  "date": { "$first": "$date" },
                  "currency": { "$first": "$currency" },
                  "notes": { "$first": "$notes" },
                  "items": {
                    "$push": "$items"
                  },
                  "total_monthly_cost": {
                    "$sum": "$items.monthly_amount"
                  }
                }
              },
              {
                "$project": {
                  "items.monthly_amount": 0,
                  "items._id": 0
                }
              }
            ],
            "purpose": ""
          }
        ]
      }
    }
  },

  {
    "_id": "refundlogs",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "type": "object",
          "required": [
            "_id",
            "__v",
            "completed_steps",
            "failed_steps",
            "processed_at",
            "refunded_amount",
            "transaction_id",
            "user_id"
          ],
          "properties": {
            "_id": {
              "$ref": "#/$defs/ObjectId"
            },
            "__v": {
              "type": "integer"
            },
            "completed_steps": {
              "type": "integer"
            },
            "failed_steps": {
              "type": "integer"
            },
            "processed_at": {
              "$ref": "#/$defs/Date"
            },
            "refunded_amount": {
              "type": "integer"
            },
            "transaction_id": {
              "$ref": "#/$defs/ObjectId"
            },
            "user_id": {
              "type": "string"
            }
          },
          "$defs": {
            "ObjectId": {
              "type": "object",
              "properties": {
                "$oid": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                }
              },
              "required": ["$oid"],
              "additionalProperties": false
            },
            "Date": {
              "type": "object",
              "properties": {
                "$date": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": ["$date"],
              "additionalProperties": false
            }
          }
        },
        "jsonSample": [
          {
            "_id": {
              "$oid": "685026e46a6ce52a0129db19"
            },
            "transaction_id": {
              "$oid": "68463c3a17026cbed8859013"
            },
            "user_id": "78759033-a6ea-4c35-95df-959d4fde77f9",
            "refunded_amount": 9500,
            "failed_steps": 5,
            "completed_steps": 0,
            "processed_at": {
              "$date": "2025-06-16T14:15:00.494Z"
            },
            "__v": 0
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_system_revenue",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "type": "object",
          "required": [
            "_id",
            "admin_share_gross",
            "date",
            "share_breakdown",
            "share_total_check",
            "system_share_gross",
            "total_amount",
            "total_refunded"
          ],
          "properties": {
            "_id": {
              "$ref": "#/$defs/ObjectId"
            },
            "admin_share_gross": {
              "$ref": "#/$defs/Double"
            },
            "date": {
              "type": "string"
            },
            "share_breakdown": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "gross",
                  "net_income",
                  "role",
                  "tax",
                  "taxable_income"
                ],
                "properties": {
                  "gross": {
                    "$ref": "#/$defs/Double"
                  },
                  "net_income": {
                    "$ref": "#/$defs/Double"
                  },
                  "role": {
                    "type": "string"
                  },
                  "tax": {
                    "type": "integer"
                  },
                  "taxable_income": {
                    "type": "integer"
                  }
                }
              }
            },
            "share_total_check": {
              "$ref": "#/$defs/Double"
            },
            "system_share_gross": {
              "$ref": "#/$defs/Double"
            },
            "total_amount": {
              "type": "integer"
            },
            "total_refunded": {
              "type": "integer"
            }
          },
          "$defs": {
            "ObjectId": {
              "type": "object",
              "properties": {
                "$oid": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                }
              },
              "required": ["$oid"],
              "additionalProperties": false
            },
            "Double": {
              "oneOf": [
                {
                  "type": "number"
                },
                {
                  "type": "object",
                  "properties": {
                    "$numberDouble": {
                      "enum": ["Infinity", "-Infinity", "NaN"]
                    }
                  }
                }
              ]
            }
          }
        },
        "jsonSample": [
          {
            "_id": {
              "$oid": "68504d545905e5e620fbbc8f"
            },
            "total_amount": 20000,
            "date": "2025-06-16",
            "total_refunded": 30400,
            "system_share_gross": -12400,
            "admin_share_gross": 2000,
            "share_breakdown": [
              {
                "role": "superadmin",
                "gross": 412,
                "taxable_income": 0,
                "tax": 0,
                "net_income": 412
              },
              {
                "role": "supervisor",
                "gross": 412,
                "taxable_income": 0,
                "tax": 0,
                "net_income": 412
              },
              {
                "role": "admin",
                "gross": 392,
                "taxable_income": 0,
                "tax": 0,
                "net_income": 392
              },
              {
                "role": "inspector_1",
                "gross": 392,
                "taxable_income": 0,
                "tax": 0,
                "net_income": 392
              },
              {
                "role": "inspector_2",
                "gross": 392,
                "taxable_income": 0,
                "tax": 0,
                "net_income": 392
              }
            ],
            "share_total_check": 2000
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "transaction_type": "payment",
                  "status": "completed",
                  "created_at": {
                    "$exists": true
                  }
                }
              },

              {
                "$addFields": {
                  "created_date": {
                    "$dateToString": {
                      "format": "%Y-%m-%d",
                      "date": {
                        "$toDate": "$created_at"
                      },
                      "timezone": "Asia/Ho_Chi_Minh"
                    }
                  }
                }
              },

              {
                "$group": {
                  "_id": "$created_date",
                  "total_amount": {
                    "$sum": "$amount"
                  }
                }
              },
              {
                "$lookup": {
                  "from": "refundlogs",
                  "let": {
                    "dateStr": "$_id"
                  },
                  "pipeline": [
                    {
                      "$addFields": {
                        "processed_date": {
                          "$dateToParts": {
                            "date": "$processed_at",
                            "timezone": "Asia/Ho_Chi_Minh"
                          }
                        }
                      }
                    },
                    {
                      "$addFields": {
                        "processed_date_str": {
                          "$concat": [
                            {
                              "$toString": "$processed_date.year"
                            },
                            "-",
                            {
                              "$cond": [
                                {
                                  "$lt": ["$processed_date.month", 10]
                                },
                                {
                                  "$concat": [
                                    "0",
                                    {
                                      "$toString": "$processed_date.month"
                                    }
                                  ]
                                },
                                {
                                  "$toString": "$processed_date.month"
                                }
                              ]
                            },
                            "-",
                            {
                              "$cond": [
                                {
                                  "$lt": ["$processed_date.day", 10]
                                },
                                {
                                  "$concat": [
                                    "0",
                                    {
                                      "$toString": "$processed_date.day"
                                    }
                                  ]
                                },
                                {
                                  "$toString": "$processed_date.day"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "$match": {
                        "$expr": {
                          "$eq": ["$processed_date_str", "$$dateStr"]
                        }
                      }
                    }
                  ],
                  "as": "refund_logs"
                }
              },

              {
                "$addFields": {
                  "date": "$_id",
                  "total_refunded": {
                    "$sum": "$refund_logs.refunded_amount"
                  },
                  "system_share_gross": {
                    "$subtract": [
                      {
                        "$multiply": ["$total_amount", 0.9]
                      },
                      {
                        "$ifNull": [
                          {
                            "$sum": "$refund_logs.refunded_amount"
                          },
                          0
                        ]
                      }
                    ]
                  },
                  "admin_share_gross": {
                    "$multiply": ["$total_amount", 0.1]
                  },
                  "role_share_unit": {
                    "$divide": [
                      {
                        "$multiply": ["$total_amount", 0.1]
                      },
                      5.1
                    ]
                  }
                }
              },

              {
                "$addFields": {
                  "share_breakdown": [
                    {
                      "role": "superadmin",
                      "gross": {
                        "$round": [
                          {
                            "$multiply": ["$role_share_unit", 1.05]
                          },
                          0
                        ]
                      }
                    },
                    {
                      "role": "supervisor",
                      "gross": {
                        "$round": [
                          {
                            "$multiply": ["$role_share_unit", 1.05]
                          },
                          0
                        ]
                      }
                    },
                    {
                      "role": "admin",
                      "gross": {
                        "$round": ["$role_share_unit", 0]
                      }
                    },
                    {
                      "role": "inspector_1",
                      "gross": {
                        "$round": ["$role_share_unit", 0]
                      }
                    },
                    {
                      "role": "inspector_2",
                      "gross": {
                        "$subtract": [
                          "$admin_share_gross",
                          {
                            "$sum": [
                              {
                                "$round": [
                                  {
                                    "$multiply": ["$role_share_unit", 1.05]
                                  },
                                  0
                                ]
                              },
                              {
                                "$round": [
                                  {
                                    "$multiply": ["$role_share_unit", 1.05]
                                  },
                                  0
                                ]
                              },
                              {
                                "$round": ["$role_share_unit", 0]
                              },
                              {
                                "$round": ["$role_share_unit", 0]
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },

              {
                "$addFields": {
                  "share_breakdown": {
                    "$map": {
                      "input": "$share_breakdown",
                      "as": "s",
                      "in": {
                        "$let": {
                          "vars": {
                            "v_gross": "$$s.gross",
                            "v_taxable": {
                              "$max": [
                                0,
                                {
                                  "$subtract": ["$$s.gross", 11000000]
                                }
                              ]
                            }
                          },
                          "in": {
                            "$let": {
                              "vars": {
                                "v_tax": {
                                  "$switch": {
                                    "branches": [
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 0]
                                        },
                                        "then": 0
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 5000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$multiply": ["$$v_taxable", 0.05]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 10000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.1
                                                  ]
                                                },
                                                250000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 18000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.15
                                                  ]
                                                },
                                                750000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 32000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.2
                                                  ]
                                                },
                                                1650000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 52000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.25
                                                  ]
                                                },
                                                3250000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 80000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.3
                                                  ]
                                                },
                                                5850000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      }
                                    ],
                                    "default": {
                                      "$round": [
                                        {
                                          "$subtract": [
                                            {
                                              "$multiply": ["$$v_taxable", 0.35]
                                            },
                                            9850000
                                          ]
                                        },
                                        0
                                      ]
                                    }
                                  }
                                }
                              },

                              "in": {
                                "role": "$$s.role",
                                "gross": "$$v_gross",
                                "taxable_income": "$$v_taxable",
                                "tax": "$$v_tax",
                                "net_income": {
                                  "$subtract": ["$$v_gross", "$$v_tax"]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },

              {
                "$addFields": {
                  "share_total_check": {
                    "$sum": "$share_breakdown.gross"
                  },
                  "_id": {
                    "$concat": [
                      "revenue_",
                      {
                        "$replaceAll": {
                          "input": "$_id",
                          "find": "-",
                          "replacement": "_"
                        }
                      }
                    ]
                  }
                }
              },

              {
                "$project": {
                  "_id": 1,
                  "date": 1,
                  "total_refunded": 1,
                  "total_amount": 1,
                  "system_share_gross": 1,
                  "admin_share_gross": 1,
                  "share_breakdown": 1,
                  "share_total_check": 1
                }
              },

              {
                "$merge": {
                  "into": "collection_system_revenue",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tính toán doanh thu hệ thống từ các giao dịch thanh toán đã hoàn thành theo ngày.",
            "data_input_from_node": ["collection_transactions", "refundlogs"],
            "data_output_to_node": "collection_system_revenue"
          },

          {
            "pipeline": [
              {
                "$match": {
                  "transaction_type": "payment",
                  "status": "completed",
                  "created_at": {
                    "$exists": true
                  }
                }
              },
              {
                "$addFields": {
                  "created_date": {
                    "$dateToString": {
                      "format": "%Y-%m",
                      "date": {
                        "$toDate": "$created_at"
                      },
                      "timezone": "Asia/Ho_Chi_Minh"
                    }
                  }
                }
              },
              {
                "$group": {
                  "_id": "$created_date",
                  "total_amount": {
                    "$sum": "$amount"
                  },
                  "transactions_list": {
                    "$push": "$$ROOT"
                  }
                }
              },
              {
                "$lookup": {
                  "from": "refundlogs",
                  "let": {
                    "monthStr": "$_id"
                  },
                  "pipeline": [
                    {
                      "$addFields": {
                        "processed_month": {
                          "$dateToString": {
                            "format": "%Y-%m",
                            "date": "$processed_at",
                            "timezone": "Asia/Ho_Chi_Minh"
                          }
                        }
                      }
                    },
                    {
                      "$match": {
                        "$expr": {
                          "$eq": ["$processed_month", "$$monthStr"]
                        }
                      }
                    },
                    {
                      "$group": {
                        "_id": null,
                        "total_refunded": {
                          "$sum": "$refunded_amount"
                        }
                      }
                    }
                  ],
                  "as": "total_refunded"
                }
              },
              {
                "$addFields": {
                  "total_refunded": {
                    "$cond": [
                      {
                        "$isArray": "$total_refunded"
                      },
                      {
                        "$arrayElemAt": ["$total_refunded.total_refunded", 0]
                      },
                      0
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "date": "$_id",
                  "system_share_gross": {
                    "$subtract": [
                      {
                        "$multiply": ["$total_amount", 0.9]
                      },
                      {
                        "$ifNull": [
                          {
                            "$sum": "$refund_logs.refunded_amount"
                          },
                          0
                        ]
                      }
                    ]
                  },
                  "admin_share_gross": {
                    "$multiply": ["$total_amount", 0.1]
                  },
                  "role_share_unit": {
                    "$divide": [
                      {
                        "$multiply": ["$total_amount", 0.1]
                      },
                      5.1
                    ]
                  },
                  "generated_at": "$$NOW",
                  "generated_by": {
                    "$const": "system"
                  },
                  "report_period": {
                    "$const": "monthly"
                  }
                }
              },
              {
                "$addFields": {
                  "share_breakdown": [
                    {
                      "role": "superadmin",
                      "gross": {
                        "$round": [
                          {
                            "$multiply": ["$role_share_unit", 1.05]
                          },
                          0
                        ]
                      }
                    },
                    {
                      "role": "supervisor",
                      "gross": {
                        "$round": [
                          {
                            "$multiply": ["$role_share_unit", 1.05]
                          },
                          0
                        ]
                      }
                    },
                    {
                      "role": "admin",
                      "gross": {
                        "$round": ["$role_share_unit", 0]
                      }
                    },
                    {
                      "role": "inspector_1",
                      "gross": {
                        "$round": ["$role_share_unit", 0]
                      }
                    },
                    {
                      "role": "inspector_2",
                      "gross": {
                        "$subtract": [
                          "$admin_share_gross",
                          {
                            "$sum": [
                              {
                                "$round": [
                                  {
                                    "$multiply": ["$role_share_unit", 1.05]
                                  },
                                  0
                                ]
                              },
                              {
                                "$round": [
                                  {
                                    "$multiply": ["$role_share_unit", 1.05]
                                  },
                                  0
                                ]
                              },
                              {
                                "$round": ["$role_share_unit", 0]
                              },
                              {
                                "$round": ["$role_share_unit", 0]
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "$addFields": {
                  "share_breakdown": {
                    "$map": {
                      "input": "$share_breakdown",
                      "as": "s",
                      "in": {
                        "$let": {
                          "vars": {
                            "v_gross": "$$s.gross",
                            "v_taxable": {
                              "$max": [
                                0,
                                {
                                  "$subtract": ["$$s.gross", 11000000]
                                }
                              ]
                            }
                          },
                          "in": {
                            "$let": {
                              "vars": {
                                "v_tax": {
                                  "$switch": {
                                    "branches": [
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 0]
                                        },
                                        "then": 0
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 5000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$multiply": ["$$v_taxable", 0.05]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 10000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.1
                                                  ]
                                                },
                                                250000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 18000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.15
                                                  ]
                                                },
                                                750000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 32000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.2
                                                  ]
                                                },
                                                1650000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 52000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.25
                                                  ]
                                                },
                                                3250000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "case": {
                                          "$lte": ["$$v_taxable", 80000000]
                                        },
                                        "then": {
                                          "$round": [
                                            {
                                              "$subtract": [
                                                {
                                                  "$multiply": [
                                                    "$$v_taxable",
                                                    0.3
                                                  ]
                                                },
                                                5850000
                                              ]
                                            },
                                            0
                                          ]
                                        }
                                      }
                                    ],
                                    "default": {
                                      "$round": [
                                        {
                                          "$subtract": [
                                            {
                                              "$multiply": ["$$v_taxable", 0.35]
                                            },
                                            9850000
                                          ]
                                        },
                                        0
                                      ]
                                    }
                                  }
                                }
                              },
                              "in": {
                                "role": "$$s.role",
                                "gross": "$$v_gross",
                                "taxable_income": "$$v_taxable",
                                "tax": "$$v_tax",
                                "net_income": {
                                  "$subtract": ["$$v_gross", "$$v_tax"]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "share_total_check": {
                    "$sum": "$share_breakdown.gross"
                  }
                }
              },
              {
                "$lookup": {
                  "from": "web_product_cost",
                  "let": {
                    "monthStr": "$_id"
                  },
                  "pipeline": [
                    {
                      "$match": {
                        "$expr": {
                          "$eq": ["$date", "$$monthStr"]
                        }
                      }
                    }
                  ],
                  "as": "web_product_cost"
                }
              },
              {
                "$addFields": {
                  "total_web_product_cost": {
                    "$cond": [
                      {
                        "$isArray": "$web_product_cost"
                      },
                      {
                        "$arrayElemAt": ["$web_product_cost.amount", 0]
                      },
                      0
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "web_product_cost": {
                    "$arrayElemAt": ["$web_product_cost", 0]
                  }
                }
              },
              {
                "$addFields": {
                  "gross_profit_system": {
                    "$subtract": [
                      "$system_share_gross",
                      {
                        "$ifNull": ["$web_product_cost.total_monthly_cost", 0]
                      }
                    ]
                  }
                }
              },
              {
                "$project": {
                  "_id": 1,
                  "date": 1,
                  "total_refunded": 1,
                  "total_amount": 1,
                  "system_share_gross": 1,
                  "admin_share_gross": 1,
                  "share_breakdown": 1,
                  "share_total_check": 1,
                  "transactions_list": 1,
                  "gross_profit_system": 1,
                  "web_product_cost": 1,
                  "generated_at": 1,
                  "generated_by": 1,
                  "report_period": 1
                }
              },
              {
                "$merge": {
                  "into": "collection_system_revenue",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tính toán doanh thu hệ thống theo tháng từ các giao dịch thanh toán đã hoàn thành.",
            "data_input_from_node": "collection_transactions",
            "data_output_to_node": "collection_system_revenue"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "collection_elite_rewards",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "EliteRewardsData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "ID duy nhất của bản ghi."
            },
            "elite_id": {
              "type": "string",
              "description": "ID của Elite Partner."
            },
            "partner_id": {
              "type": "string",
              "description": "ID của Partner được matched với Elite."
            },
            "reward_amount": {
              "type": "integer",
              "minimum": 0,
              "description": "Số tiền thưởng (đơn vị VND)."
            },
            "reward_percentage": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Phần trăm thưởng dựa trên thành tích của partner."
            },
            "rank_improvement": {
              "type": "integer",
              "minimum": 0,
              "description": "Số hạng tăng lên của partner trong leaderboard."
            },
            "reward_date": {
              "type": "string",
              "format": "date-time",
              "description": "Thời điểm thưởng được trao."
            },
            "description": {
              "type": "string",
              "description": "Mô tả chi tiết về khoản thưởng."
            }
          },
          "required": [
            "_id",
            "elite_id",
            "partner_id",
            "reward_amount",
            "reward_percentage",
            "rank_improvement",
            "reward_date",
            "description"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "reward_001",
            "elite_id": "elite_123",
            "partner_id": "partner_456",
            "reward_amount": 150000,
            "reward_percentage": 0.3,
            "rank_improvement": 15,
            "reward_date": "2025-02-14T18:26:02.588Z",
            "description": "Thưởng cho Partner vì đã cải thiện hạng trong leaderboard."
          },
          {
            "_id": "reward_002",
            "elite_id": "elite_789",
            "partner_id": "partner_012",
            "reward_amount": 100000,
            "reward_percentage": 0.2,
            "rank_improvement": 10,
            "reward_date": "2025-02-14T18:27:15.345Z",
            "description": "Thưởng cho Partner vì đã cải thiện hạng trong leaderboard."
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "status": "active",
                  "is_partner": true
                }
              },
              {
                "$lookup": {
                  "from": "collection_leaderboard",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "leaderboard_data"
                }
              },
              {
                "$unwind": "$leaderboard_data"
              },
              {
                "$addFields": {
                  "current_rank": "$leaderboard_data.rank",
                  "previous_rank": {
                    "$ifNull": [
                      "$leaderboard_data.previous_rank",
                      "$leaderboard_data.rank"
                    ]
                  }
                }
              },
              {
                "$addFields": {
                  "rank_improvement": {
                    "$subtract": ["$previous_rank", "$current_rank"]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_user_partners",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Xác định sự cải thiện hạng của partner trong leaderboard.",
            "data_input_from_node": ["collection_user_partners"],
            "data_output_to_node": ["collection_user_partners"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "status": "active",
                  "is_partner": true,
                  "rank_improvement": { "$gt": 0 }
                }
              },
              {
                "$lookup": {
                  "from": "collection_elite_partners",
                  "localField": "matched_with",
                  "foreignField": "user_id",
                  "as": "elite_data"
                }
              },
              {
                "$unwind": "$elite_data"
              },
              {
                "$addFields": {
                  "reward_percentage": {
                    "$cond": {
                      "if": { "$gte": ["$rank_improvement", 15] },
                      "then": 0.3,
                      "else": {
                        "$cond": {
                          "if": {
                            "$and": [
                              { "$gte": ["$rank_improvement", 10] },
                              { "$lt": ["$rank_improvement", 15] }
                            ]
                          },
                          "then": 0.2,
                          "else": {
                            "$cond": {
                              "if": {
                                "$and": [
                                  { "$gte": ["$rank_improvement", 5] },
                                  { "$lt": ["$rank_improvement", 10] }
                                ]
                              },
                              "then": 0.1,
                              "else": 0
                            }
                          }
                        }
                      }
                    }
                  },
                  "reward_amount": {
                    "$add": [
                      { "$multiply": [50000, "$reward_percentage"] },
                      50000
                    ]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_elite_rewards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Tính toán và cập nhật phần thưởng cho Elite và Partner.",
            "data_input_from_node": ["collection_user_partners"],
            "data_output_to_node": ["collection_elite_rewards"]
          },
          {
            "pipeline": [
              {
                "$match": {
                  "is_processed": { "$exists": false }
                }
              },
              {
                "$lookup": {
                  "from": "collection_cards",
                  "localField": "elite_id",
                  "foreignField": "user_id",
                  "as": "card_data"
                }
              },
              {
                "$unwind": "$card_data"
              },
              {
                "$addFields": {
                  "tax_amount": {
                    "$multiply": ["$reward_amount", 0.1]
                  },
                  "net_reward": {
                    "$multiply": ["$reward_amount", 0.9]
                  },
                  "updated_balance": {
                    "$add": [
                      "$card_data.balance",
                      { "$multiply": ["$reward_amount", 0.9] }
                    ]
                  }
                }
              },
              {
                "$merge": {
                  "into": "collection_cards",
                  "on": "card_id",
                  "whenMatched": [
                    {
                      "$set": {
                        "balance": "$updated_balance"
                      }
                    }
                  ],
                  "whenNotMatched": "insert"
                }
              },
              {
                "$merge": {
                  "into": "collection_user_transactions",
                  "on": "_id",
                  "whenMatched": [
                    {
                      "$set": {
                        "transaction_type": "reward",
                        "amount": "$reward_amount",
                        "tax_amount": "$tax_amount",
                        "net_reward": "$net_reward",
                        "status": "completed",
                        "transaction_date": "$$NOW"
                      }
                    }
                  ],
                  "whenNotMatched": "insert"
                }
              },
              {
                "$set": {
                  "is_processed": true
                }
              },
              {
                "$merge": {
                  "into": "collection_elite_rewards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Cộng tiền thưởng vào balance của thẻ trong collection_cards.",
            "data_input_from_node": [
              "collection_elite_rewards",
              "collection_cards"
            ],
            "data_output_to_node": [
              "collection_cards",
              "collection_elite_rewards"
            ]
          }
        ]
      }
    },

    "personal": {
      "node_info": {
        "name": "English Test System",
        "author": "Joshept",
        "version": "1.0",
        "year": "2025"
      }
    }
  }
]
